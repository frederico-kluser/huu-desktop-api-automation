{
  "project_metadata": {
    "name": "NutJS Desktop Automation API â€“ RESTful Web/Desktop Automation with LLM Integration",
    "domain": [
      "Web/Mobile/Desktop Automation",
      "Backend API",
      "AI Integration",
      "Desktop Input Event Capture",
      "Clipboard Management",
      "Screen Capture",
      "Keyboard and Mouse Control",
      "Robotic Process Automation (RPA)",
      "Natural Language Processing",
      "Large Language Models",
      "Software Testing",
      "UI Automation",
      "Status Monitoring",
      "Frontend Web Application"
    ],
    "current_phase": [
      "Development",
      "Production",
      "Stable Configuration",
      "Testing Automation",
      "MVP",
      "Debugging",
      "Testing and Validation",
      "Stable deployment"
    ],
    "critical_business_rules": [
      "API key authentication required for all sensitive endpoints",
      "Strict input validation using JSON Schema/Zod",
      "Clipboard content must not exceed 1 MB",
      "Text input must be non-empty and free of control characters",
      "Key combinations must use only allowed modifiers and letters (1-5 keys)",
      "Timing values must be non-negative integers and not exceed 300000ms",
      "Mouse and screen coordinates must be within valid screen bounds",
      "Consistent error response format with proper HTTP status codes",
      "No leakage of sensitive error details in production",
      "Content size must not exceed 1 MB",
      "Rate limiting to prevent overload (max 50000 events/s)",
      "Buffer size must be between 1 and 100000",
      "Heartbeat interval must be between 1000 and 300000 ms",
      "Max event age must be between 1000 and 3600000 ms",
      "Max text length must be between 1 and 100000",
      "Production logs must be performant and minimal; development logs must be human-readable",
      "Singleton registration for event services",
      "Consistent dependency injection",
      "No additional properties allowed in requests",
      "Input data must conform to JSON Schema Draft 7",
      "Reliable event streaming and replay",
      "Coverage minimum 80% for tests",
      "Strict TypeScript typing enforced",
      "No emission of test files in production build",
      "LLM requests must respect token and temperature limits",
      "Consistent and formatted LLM responses",
      "Fallback to safe output in case of parsing errors",
      "API key must be kept secret and never exposed in code",
      "Service endpoint must respond within acceptable time",
      "Payload format must comply with API specification",
      "Graceful error handling and logging for all operations",
      "Clipboard and input data must be handled securely",
      "macOS Accessibility permissions required for global input capture",
      "Status accuracy and latency measurement must be precise",
      "Cache TTL for status is 60 seconds",
      "Timeout for status requests is 5 seconds"
    ]
  },
  "technical_stack": {
    "primary_language": [
      "TypeScript 5.x",
      "Node.js 18+",
      "JavaScript (ES2020+)",
      "React 18.x",
      "HTML5",
      "CSS3"
    ],
    "frameworks": [
      "Fastify 4.x",
      "React 18.x",
      "Jest 29.x",
      "Webpack 5.x",
      "TSyringe",
      "Zod 3.x",
      "NutJS",
      "uiohook-napi",
      "Bootstrap 5.3.2",
      "React-Bootstrap 2.x",
      "LangChain"
    ],
    "databases": ["None", "PostgreSQL 15", "Redis 7.0"],
    "external_services": [
      "OpenAI API",
      "DeepSeek API",
      "NutJS",
      "clipboardy",
      "sharp",
      "nanoid",
      "LangChain LLM API",
      "Server-Sent Events (SSE)",
      "Environment variables",
      "pino (logging)",
      "Local backend API at http://localhost:3000",
      "GitHub (external documentation)",
      "CDN Bootstrap",
      "CDN Font Awesome"
    ],
    "package_manager": ["npm", "yarn"]
  },
  "architecture_patterns": {
    "design_pattern": [
      "Clean Architecture",
      "Dependency Injection",
      "Event-driven",
      "RESTful API",
      "Singleton",
      "Adapter Pattern",
      "Factory Pattern",
      "Schema Validation",
      "Service Layer",
      "Observer Pattern",
      "Modular Architecture",
      "Controller-Service Pattern",
      "Component-Based Architecture (frontend)",
      "Single Page Application (SPA)",
      "Plugin Architecture"
    ],
    "folder_structure": [
      "src/ (main TypeScript source code)",
      "dist/ (build output)",
      "web/ (React frontend)",
      "tests/ (unit and integration tests)",
      "config/ (configuration and logger)",
      "domain/ (entities and interfaces)",
      "application/services (business logic and services)",
      "infrastructure/adapters (external integrations)",
      "interface/controllers (API controllers and middleware)",
      "schemas/ (validation schemas)",
      "types/ (shared TypeScript types)",
      "public/ (static assets)",
      "node_modules/ (dependencies)",
      "coverage/ (test coverage)",
      "logs/ (log files)"
    ],
    "naming_conventions": [
      "camelCase for variables and functions",
      "PascalCase for classes, types, and React components",
      "kebab-case for files and routes",
      "UPPER_SNAKE_CASE for environment variables and constants",
      "Interfaces prefixed with 'I'",
      "DTOs with 'Request' suffix",
      "Controllers with 'Controller' suffix",
      "Test files with .test.ts or .test.tsx suffix"
    ],
    "module_boundaries": [
      "Clear separation between backend (API) and frontend (React)",
      "Domain does not depend on Application or Infrastructure",
      "Application depends on Domain",
      "Infrastructure depends on Application",
      "Controllers depend on services via dependency injection",
      "Validation schemas isolated from business logic",
      "DTOs and schemas isolated for validation and typing",
      "Services encapsulate business logic and hardware/system interactions",
      "Types shared via types folder",
      "Mocks isolated in tests",
      "Config, DTO, and parsing modules separated",
      "Frontend UI isolated from backend logic",
      "Component isolation with props for communication"
    ]
  },
  "code_standards": {
    "style_guide": [
      "Airbnb JavaScript/TypeScript Style Guide",
      "ESLint Recommended",
      "Prettier",
      "TypeScript ESLint Recommended",
      "CSS Standard Practices",
      "JSDoc for documentation"
    ],
    "linting_rules": [
      "ESLint with @typescript-eslint plugin",
      "eslint-config-prettier",
      "eslint-plugin-prettier",
      "@typescript-eslint/no-explicit-any: error",
      "@typescript-eslint/no-unused-vars: error with argsIgnorePattern '^_'",
      "@typescript-eslint/no-floating-promises: error",
      "@typescript-eslint/await-thenable: error",
      "no-async-promise-executor: error",
      "no-await-in-loop: warn",
      "strict typing enforced"
    ],
    "formatting": [
      "Prettier with default config",
      "prettier --write .",
      "semi: true",
      "trailingComma: all",
      "singleQuote: true",
      "printWidth: 100",
      "tabWidth: 2",
      "Integration with ESLint for consistent formatting",
      "Indentation: 2 spaces"
    ],
    "documentation_style": [
      "JSDoc for functions, classes, and interfaces",
      "Inline comments in Portuguese for context",
      "JSDoc for public methods and types"
    ],
    "type_checking": [
      "Strict TypeScript (strict mode enabled)",
      "TypeScript typings for payloads and responses",
      "Zod for runtime validation",
      "StrictNullChecks",
      "noImplicitAny",
      "TypeScript strict mode via tsconfig.json"
    ]
  },
  "testing_strategy": {
    "test_framework": [
      "Jest 29.x",
      "ts-jest",
      "React Testing Library",
      "Postman Tests (JavaScript)"
    ],
    "test_structure": [
      "tests/unit for unit tests",
      "tests/integration for integration tests",
      "tests/components for UI components",
      "tests/hooks for custom hooks",
      "Test files with .test.ts or .test.tsx suffix",
      "Mocks for external dependencies"
    ],
    "coverage_requirements": [
      "Minimum 80% coverage",
      "branches >= 80%",
      "functions >= 80%",
      "lines >= 80%",
      "statements >= 80%",
      "Coverage monitored via jest --coverage"
    ],
    "test_patterns": [
      "AAA (Arrange-Act-Assert)",
      "Given-When-Then",
      "Mocks for external dependencies",
      "Direct API call and response validation",
      "Snapshot testing for UI",
      "Parameterized tests for multiple cases"
    ],
    "mocking_approach": [
      "Mocks and spies via Jest",
      "jest.mock for external modules",
      "Mocks for clipboardy, pino, nanoid",
      "Mocks for FastifyRequest and FastifyReply",
      "Mocks for NutJS and uiohook-napi",
      "Mocks for services and adapters",
      "Mocking React components and hooks",
      "Mock Service Worker (MSW) for API calls"
    ]
  },
  "development_workflow": {
    "branch_strategy": ["GitHub Flow", "git Flow"],
    "commit_conventions": ["Conventional Commits"],
    "pr_requirements": [
      "Code review mandatory",
      "Passing CI checks",
      "Lint and test checks required",
      "Automated tests passing"
    ],
    "ci_cd_pipeline": [
      "Build, lint, test, and deploy automated via GitHub Actions",
      "Unit tests",
      "Linting",
      "Deploy automatic to staging/production"
    ]
  },
  "commands": {
    "setup": [
      "npm install",
      "cp .env.example .env",
      "npm install && npm run build",
      "npm install uiohook-napi"
    ],
    "install": ["npm install", "npm ci"],
    "dev": ["npm run dev", "npm start", "webpack serve --config webpack.config.js", "tsc --watch"],
    "test": ["npm test", "npm run test", "npm test -- --coverage"],
    "build": ["npm run build", "tsc --build", "webpack --config webpack.config.js"],
    "lint": ["npm run lint", "eslint . --ext .ts,.tsx"],
    "format": ["npm run format", "prettier --write ."]
  },
  "security_constraints": {
    "authentication_method": [
      "API key via HTTP header 'x-api-key'",
      "JWT",
      "API keys for external services"
    ],
    "authorization_rules": [
      "Role-based Access Control (RBAC)",
      "Access restricted to users with valid API key",
      "Access control via Fastify middleware",
      "API key must be valid and authorized for endpoint access"
    ],
    "sensitive_data": [
      "API keys for OpenAI and DeepSeek",
      "JWT tokens",
      "Clipboard content",
      "Environment variables for configuration",
      "User input data (keyboard, mouse, clipboard)",
      "Prompt and LLM responses",
      "Base64 image data",
      "No sensitive data stored in local cache"
    ],
    "security_headers": [
      "Content-Security-Policy",
      "X-Frame-Options",
      "Strict-Transport-Security",
      "Content-type: application/json",
      "x-api-key required in header",
      "Accept: text/event-stream for SSE",
      "Cache-Control: no-cache"
    ],
    "encryption_requirements": [
      "TLS for all communications",
      "HTTPS required for external API calls",
      "Hashing (bcrypt) for passwords",
      "Environment variables must not expose sensitive data",
      "Encryption in transit via HTTPS"
    ]
  },
  "performance_requirements": {
    "response_time_limits": [
      "API responses < 200ms",
      "Standard operations must respond in < 5000ms",
      "Low latency for automation and REST API operations",
      "Real-time event capture with minimal latency",
      "Timeout for status requests is 5 seconds",
      "Parsing and validation must be performed in milliseconds",
      "Immediate response for authentication (< 100ms)",
      "Sub-200ms for critical routes"
    ],
    "optimization_priorities": [
      "Build and test speed",
      "Response speed prioritized over memory usage",
      "Low latency for input and capture operations",
      "Efficient event and image handling",
      "Efficient validation to minimize runtime overhead",
      "Production performance optimization",
      "Development build prioritizes speed",
      "Bundle size minimization",
      "Hot reload speed",
      "Efficient use of singletons for shared state"
    ],
    "caching_strategy": [
      "Redis cache with configurable TTL for static data",
      "Circular buffer as cache for recent events",
      "Cache localStorage with TTL of 60 seconds for status",
      "No cache for dynamic input operations",
      "Configuration loaded once at startup"
    ],
    "scalability_considerations": [
      "Horizontally scalable architecture via containers",
      "Support for multiple concurrent requests",
      "SSE streaming for real-time data",
      "Fastify and modular architecture for scalability",
      "Singletons limit instance, but can be scaled horizontally",
      "Batch size configurable for scalability",
      "Support for multiple SSE clients",
      "Component decoupling for frontend scalability"
    ]
  },
  "error_handling": {
    "error_format": [
      "Standard JSON with fields: success, error, code, details",
      "Validation errors standardized by Zod",
      "CommandResult object with success boolean and error string",
      "Logs structured via pino logger",
      "Consistent error response format for all endpoints",
      "Proper HTTP status codes for errors"
    ],
    "logging_strategy": [
      "Log level configurable via LOG_LEVEL",
      "Structured logging with pino and pino-pretty",
      "Separate logs for errors and standard output",
      "Human-readable logs in development",
      "Production logs are performant and minimal",
      "Sensitive data masked in logs"
    ],
    "monitoring_tools": [
      "Sentry for production error monitoring",
      "PM2 internal monitoring",
      "Health check endpoint for basic monitoring",
      "Integration with external systems via logs (e.g., ELK, Datadog)"
    ],
    "error_recovery": [
      "Automatic retries for transient failures",
      "Graceful shutdown to avoid resource leaks",
      "Fail-fast for invalid configuration",
      "Fallback to safe output in case of parsing errors",
      "Reject invalid requests with HTTP 400 and descriptive message",
      "Graceful error handling for all operations",
      "Retries configured for streaming and critical routes"
    ]
  },
  "dependencies_context": {
    "critical_dependencies": [
      "OpenAI API",
      "DeepSeek API",
      "TypeScript",
      "Fastify",
      "TSyringe",
      "Zod",
      "Jest",
      "NutJS",
      "clipboardy",
      "sharp",
      "nanoid",
      "pino",
      "Webpack",
      "React",
      "React-Bootstrap",
      "LangChain",
      "uiohook-napi"
    ],
    "deprecated_packages": ["robotjs"],
    "version_constraints": [
      "Node.js >=18",
      "TypeScript 5.x",
      "Fastify 4.x",
      "Zod 3.x",
      "clipboardy >=3.0.0",
      "tsyringe 4.x",
      "nanoid >=4.0.0",
      "React >=18.0.0",
      "Webpack ^5.89.0",
      "Bootstrap 5.3.2",
      "Font Awesome 6.4.0"
    ],
    "internal_packages": [
      "@nut-tree-fork/nut-js",
      "domain/interfaces",
      "domain/entities",
      "application/services",
      "infrastructure/adapters",
      "interface/controllers",
      "config",
      "types",
      "schemas",
      "middleware",
      "routes",
      "public",
      "components",
      "hooks"
    ]
  },
  "current_challenges": {
    "technical_debt": [
      "Refactoring legacy JavaScript modules to TypeScript",
      "Improve test coverage for edge cases (clipboard, streaming)",
      "Enhance error handling granularity",
      "Validation of environment variables could be more robust",
      "Authentication and authorization not fully implemented in all modules",
      "Partial documentation in know-how.txt",
      "Fallback and error handling in complex parsing could be improved",
      "Maintain compatibility with legacy and dynamic output formats",
      "Improve async error handling in service shutdown",
      "Improve organization of inline styles in frontend"
    ],
    "known_issues": [
      "Inconsistencies in local development environments",
      "Limitations in handling large text volumes for typing",
      "macOS Accessibility permissions may block event capture",
      "Possible event loss in full buffer scenarios",
      "Rate limiting may drop events during spikes",
      "Dependency on external API availability",
      "Possible lack of feedback during status loading",
      "Cache may be cleared if invalid JSON is detected",
      "Potential platform compatibility issues with uiohook-napi"
    ],
    "performance_bottlenecks": [
      "Type-checking analysis may impact lint performance",
      "Image capture and search operations can be costly",
      "Sequential await in typing may cause slowness",
      "Base64 decoding and image search can be expensive for large images",
      "Logging overhead in production if misconfigured",
      "Potential event flooding mitigated by selective logging",
      "No major bottlenecks identified in static UI"
    ],
    "migration_status": [
      "Migration to TypeScript completed",
      "Stable, no active migrations",
      "Gradual migration from legacy to dynamic output format ongoing",
      "Jest updated to latest version"
    ]
  },
  "team_preferences": {
    "code_review_focus": [
      "Test coverage",
      "Code quality",
      "Lint rule compliance",
      "Strict typing",
      "Security and validation",
      "Consistent error handling",
      "Separation of concerns",
      "Proper dependency injection",
      "Consistent logging",
      "Clarity and documentation",
      "Responsiveness and performance"
    ],
    "documentation_requirements": [
      "Clear documentation via JSDoc",
      "JSDoc for all public methods and types",
      "Document environment variables and usage",
      "Clear documentation for APIs and DTOs",
      "Inline comments in Portuguese for context"
    ],
    "communication_style": [
      "Objective and clear comments in Portuguese",
      "Technical comments in English for specific terms",
      "Objective PRs with detailed descriptions",
      "Use of emojis for log clarity",
      "Clarity and objectivity in comments and PRs"
    ],
    "decision_log": [
      "Adoption of Clean Architecture and strict async/await rules",
      "API key for simple authentication",
      "Separation by operation type (mouse, keyboard, clipboard, screen, llm)",
      "Use of Fastify for high performance",
      "TSyringe for dependency injection",
      "Zod for declarative validation",
      "Clipboardy for cross-platform compatibility",
      "Singleton for event services",
      "Configurable rate limiter via environment variable",
      "Adapter pattern for hardware/API integration",
      "dotenv for centralized configuration",
      "Fail-fast for invalid configuration",
      "Factory pattern for output parsing",
      "Enums for LLM model integrity",
      "Mocks for test isolation",
      "React Functional Components and React-Bootstrap for UI",
      "Webpack for build and local proxy for backend integration"
    ]
  },
  "api_specifications": {
    "api_style": ["RESTful", "REST with SSE for streaming", "Internal event dispatching API"],
    "versioning_strategy": ["URI versioning (e.g., /api/v1)", "Prefix /api/v1 for versioning"],
    "response_formats": [
      "application/json",
      "Standard JSON with fields: success, data, error",
      "Base64 encoded images",
      "text/event-stream for SSE",
      "LLMResponse object with content, model, finishReason, usage"
    ],
    "rate_limiting": [
      "Configurable via environment variable INPUT_EVENT_RATE",
      "Default limit 5000 events per second",
      "1000 requests per minute per IP"
    ]
  },
  "deployment_context": {
    "environments": ["development", "staging", "production", "Localhost (http://localhost:3000)"],
    "deployment_method": [
      "PM2",
      "Docker container",
      "Node.js server",
      "Webpack for frontend",
      "CI/CD pipeline via GitHub Actions"
    ],
    "environment_variables": [
      "NODE_ENV",
      "PORT",
      "LOG_LEVEL",
      "API_KEY",
      "OPENAI_API_KEY",
      "DEEPSEEK_API_KEY",
      "INPUT_EVENT_BUFFER",
      "INPUT_EVENT_RATE",
      "INPUT_EVENT_HEARTBEAT",
      "INPUT_EVENT_MAX_AGE",
      "KEYBOARD_DEFAULT_MODE",
      "KEYBOARD_MAX_TEXT_LENGTH",
      "KEYBOARD_DEFAULT_DELAY_PER_CHAR",
      "KEYBOARD_MAX_DELAY",
      "KEYBOARD_BATCH_SIZE",
      "MOUSE_MIN_DUR",
      "MOUSE_MAX_DUR",
      "MOUSE_DEFAULT_SMOOTH",
      "MOUSE_SAMPLE_RATE",
      "MOUSE_STREAM_INTERVAL",
      "SCREEN_CONFIDENCE",
      "LLM_SERVICE_ENDPOINT",
      "CACHE_TTL",
      "ENABLE_CACHE",
      "OUTPUT_SCHEMA_MAX_SIZE",
      "OUTPUT_SCHEMA_MAX_DEPTH",
      "OUTPUT_SCHEMA_PARSE_TIMEOUT",
      "REACT_APP_API_URL",
      "REACT_APP_GITHUB_DOCS_URL",
      "REACT_APP_ENV"
    ],
    "infrastructure_constraints": [
      "Memory limits in Kubernetes pods",
      "macOS Accessibility permissions required",
      "Firewall rules",
      "DISPLAY variable on Linux",
      "Single instance per process limitation",
      "Access to system APIs for input and clipboard",
      "Persistent SSE connections require memory management",
      "Node.js 18+ required",
      "Proper configuration of environment variables required",
      "Local API must be running on port 3000",
      "HTTPS and CDN support for static assets",
      "LocalStorage size limits in browser"
    ]
  },
  "lastCommitHash": "d2c90f66c2e1662c2511f9012f998f8ccdd3f95f"
}

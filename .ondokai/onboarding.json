{
  "project_metadata": {
    "name": "NutJS Automation API â€“ Modular Node.js Backend for Desktop, Input, and LLM Integration",
    "domain": [
      "Desktop Automation",
      "UI Automation",
      "Input Simulation",
      "Screen Recognition",
      "Clipboard Management",
      "User Interaction Tracking",
      "Robotic Process Automation (RPA)",
      "API Management",
      "Backend",
      "Software Testing",
      "AI Integration",
      "Natural Language Processing",
      "Event Streaming",
      "Command Execution"
    ],
    "current_phase": [
      "Development",
      "Production",
      "Maintenance",
      "MVP",
      "Stable",
      "Testing Automation"
    ],
    "critical_business_rules": [
      "API key authentication mandatory for all endpoints",
      "Clipboard content size limit (max 1MB) must be respected",
      "Mouse and keyboard operations must validate input parameters (e.g., coordinates >= 0)",
      "SSE connections require proper Accept header 'text/event-stream'",
      "Response time for requests should be below 5000ms",
      "Strict input validation using Zod schemas",
      "No leakage of sensitive error details in production",
      "Content must be a non-empty string",
      "Key combinations must have between 1 and 5 keys and only use allowed modifiers and letters",
      "Timing values must be non-negative integers and not exceed 300000ms",
      "Buffer size must be between 1 and 100000",
      "Heartbeat interval must be between 1000 and 300000 ms",
      "Max event rate must be between 1 and 50000 events/s",
      "Max event age must be between 1000 and 3600000 ms",
      "Max text length must be between 1 and 100000",
      "Default mode must be one of: instant, perChar, total",
      "Production logs must be performant and minimal",
      "Development logs must be human-readable",
      "Shutdown must be graceful to avoid data loss",
      "Singletons for global event management",
      "No additional properties allowed in requests",
      "Input data must conform to JSON Schema Draft 7",
      "Consistent error response format",
      "Proper HTTP status codes",
      "Strict type checking and linting enforced",
      "Coverage minimum 80% for all services and configuration",
      "No source maps generated in production",
      "API must return valid base64 image data",
      "Saved file must be a valid PNG",
      "Strict separation between src and dist",
      "No emission of test files during build",
      "Environment variables must be defined and valid",
      "API keys must not be exposed in code",
      "Consistent logging for success and failure",
      "Graceful error handling and resource cleanup"
    ]
  },
  "technical_stack": {
    "primary_language": ["TypeScript 5.x", "Node.js 18.x", "JavaScript (ESM)"],
    "frameworks": [
      "Fastify 4.x",
      "Jest 29.x",
      "ESLint",
      "Prettier",
      "TSyringe 4.x",
      "Zod 3.x",
      "NutJS",
      "LangChain"
    ],
    "databases": ["None"],
    "external_services": [
      "OpenAI API",
      "NutJS",
      "Server-Sent Events (SSE) endpoint",
      "clipboardy",
      "sharp",
      "dotenv",
      "nanoid",
      "pino",
      "LangChain LLM API"
    ],
    "package_manager": ["npm", "yarn"]
  },
  "architecture_patterns": {
    "design_pattern": [
      "Clean Architecture",
      "Modular Architecture",
      "Dependency Injection",
      "RESTful API",
      "Event-driven Architecture",
      "Observer Pattern",
      "Singleton",
      "Service Layer",
      "DTO Pattern",
      "Schema Validation",
      "Adapter Pattern",
      "Plugin-based Architecture",
      "Configuration Management",
      "Layered Architecture",
      "Factory Method",
      "Strategy Pattern",
      "Fail-fast"
    ],
    "folder_structure": [
      "src/",
      "dist/",
      "tests/",
      "config/",
      "domain/entities",
      "application/services",
      "infrastructure/adapters",
      "interface/controllers",
      "middleware/",
      "schemas/",
      "types/",
      "logs/",
      "coverage/"
    ],
    "naming_conventions": [
      "camelCase for variables and functions",
      "PascalCase for classes and types",
      "kebab-case for endpoints and files",
      "UPPER_SNAKE_CASE for environment variables",
      "DTO suffix for data transfer objects",
      "Service/Adapter/Controller suffix for classes",
      "Interfaces prefixed with 'I'",
      "JSON keys use camelCase",
      "Files with .ts extension"
    ],
    "module_boundaries": [
      "Clear separation between domain, application, infrastructure, and interface",
      "Controllers depend on services via dependency injection",
      "Services encapsulate business logic and interact with adapters",
      "DTOs and schemas isolated for validation and typing",
      "Types and interfaces separated from implementation",
      "Configuration isolated in dedicated modules",
      "Middleware isolated for authentication and validation",
      "Tests isolated from production code",
      "No circular dependencies",
      "Unidirectional dependencies for maintainability"
    ]
  },
  "code_standards": {
    "style_guide": ["Airbnb JavaScript/TypeScript Style Guide", "ESLint Recommended", "Prettier"],
    "linting_rules": [
      "ESLint with @typescript-eslint plugin",
      "@typescript-eslint/no-explicit-any: error",
      "@typescript-eslint/no-unused-vars: error with argsIgnorePattern '^_'",
      "@typescript-eslint/strict-boolean-expressions",
      "no-async-promise-executor: error",
      "no-await-in-loop: warn"
    ],
    "formatting": [
      "Prettier integration via plugin:prettier/recommended",
      "semi: true",
      "singleQuote: true",
      "trailingComma: all",
      "printWidth: 100",
      "tabWidth: 2"
    ],
    "documentation_style": [
      "JSDoc for public methods, classes, and interfaces",
      "Inline JSON descriptions",
      "Comments in Portuguese for context"
    ],
    "type_checking": [
      "Strict TypeScript (strict mode enabled)",
      "TypeScript strict mode via tsconfig",
      "Runtime validation with Zod"
    ]
  },
  "testing_strategy": {
    "test_framework": ["Jest 29.x", "ts-jest"],
    "test_structure": [
      "tests/unit for unit tests",
      "tests/integration for integration tests",
      "tests/schemas for schema validation",
      "Coverage stored in coverage/",
      "Setup via jest.config.js"
    ],
    "coverage_requirements": [
      "Coverage minimum 80% for statements, branches, functions, and lines",
      ">= 90% for schemas and DTOs"
    ],
    "test_patterns": [
      "**/__tests__/**/*.test.ts",
      "**/tests/**/*.test.ts",
      "**/tests/**/*.spec.ts",
      "Arrange-Act-Assert (AAA)",
      "Mocks for external dependencies"
    ],
    "mocking_approach": [
      "Jest mocks and spies for isolation",
      "Mocks for clipboardy, NutJS, and logger",
      "Mock environment variables",
      "Mock FastifyRequest and FastifyReply",
      "Fixtures for input events"
    ]
  },
  "development_workflow": {
    "branch_strategy": ["GitHub Flow with feature, main, and hotfix branches"],
    "commit_conventions": ["Conventional Commits"],
    "pr_requirements": [
      "Code review mandatory",
      "Passing CI checks",
      "Lint and test checks required"
    ],
    "ci_cd_pipeline": [
      "Build, lint, test, and deploy automated via GitHub Actions",
      "Unit tests",
      "Linting",
      "Deploy automatic to staging and production"
    ]
  },
  "commands": {
    "setup": ["npm install && cp .env.example .env"],
    "install": ["npm install"],
    "dev": ["npm run dev", "tsc --watch"],
    "test": ["npm test", "npm test -- --coverage"],
    "build": ["npm run build", "tsc"],
    "lint": ["npm run lint", "eslint . --ext .ts,.tsx"],
    "format": ["npm run format", "prettier --write ."]
  },
  "security_constraints": {
    "authentication_method": ["API key via header 'x-api-key'"],
    "authorization_rules": [
      "All endpoints require valid API key",
      "Unauthorized requests return 401",
      "Access to streaming endpoints restricted by API key"
    ],
    "sensitive_data": [
      "API_KEY",
      "OPENAI_API_KEY",
      "Clipboard content",
      "Environment variables",
      "Base64 image data"
    ],
    "security_headers": [
      "Content-Type: application/json",
      "Accept: text/event-stream for SSE",
      "Header 'x-api-key' required",
      "Content-Security-Policy",
      "X-Content-Type-Options",
      "Cache-Control: no-cache",
      "Connection: keep-alive",
      "X-Accel-Buffering: no"
    ],
    "encryption_requirements": [
      "HTTPS required for all external communication",
      "TLS for external API connections"
    ]
  },
  "performance_requirements": {
    "response_time_limits": [
      "< 5000ms for all requests",
      "Low latency for SSE real-time events",
      "Mouse and screen operations should respond in < 200ms",
      "Timeout for LLM requests: 30000ms"
    ],
    "optimization_priorities": [
      "Efficient resource usage",
      "Low latency for event streaming and automation",
      "Validation efficiency to minimize request overhead",
      "Performance optimized in production, legibility in development",
      "Graceful shutdown to avoid request loss"
    ],
    "caching_strategy": [
      "Circular buffer acts as cache for recent events",
      "No persistent cache implemented"
    ],
    "scalability_considerations": [
      "SSE connections managed with throttling (moveIntervalMs)",
      "Horizontal scalability via Fastify and Node.js cluster",
      "Singletons for global event management",
      "Support for multiple concurrent SSE clients",
      "Modular architecture for horizontal scaling"
    ]
  },
  "error_handling": {
    "error_format": [
      "Standard JSON error response with fields: success (false), error message, code, details array",
      "Zod validation error format",
      "Logs structured via pino"
    ],
    "logging_strategy": [
      "Log level configurable via LOG_LEVEL",
      "Structured logging with pino and pino-pretty",
      "Logs stored in logs/ directory",
      "Development logs are human-readable, production logs are minimal"
    ],
    "monitoring_tools": [
      "PM2 internal monitoring",
      "Integrable with external systems (e.g., ELK, Sentry, Datadog)"
    ],
    "error_recovery": [
      "Graceful shutdown to avoid data loss",
      "Fail-fast on invalid configuration",
      "Centralized error handling middleware",
      "Fallback to default values for environment parsing",
      "Reject invalid requests with HTTP 400 and descriptive message"
    ]
  },
  "dependencies_context": {
    "critical_dependencies": [
      "OpenAI API",
      "NutJS",
      "Fastify",
      "TSyringe",
      "Zod",
      "Jest",
      "ESLint",
      "Prettier",
      "clipboardy",
      "sharp",
      "dotenv",
      "nanoid",
      "pino",
      "LangChain"
    ],
    "deprecated_packages": ["None"],
    "version_constraints": [
      "TypeScript 5.x",
      "Node.js 18+",
      "Fastify 4.x",
      "Zod >=3.0.0 <4.0.0",
      "clipboardy >=3.0.0",
      "tsyringe 4.x",
      "Jest >=29",
      "Compatible with JSON Schema Draft 7"
    ],
    "internal_packages": [
      "src/",
      "domain/entities",
      "application/services",
      "infrastructure/adapters",
      "interface/controllers",
      "middleware",
      "schemas",
      "types",
      "config"
    ]
  },
  "current_challenges": {
    "technical_debt": [
      "Lack of advanced error handling and automatic reconnection",
      "Need for more comprehensive tests for edge cases",
      "Singleton global state management can complicate testing",
      "Validation of environment variables can be improved",
      "Replay of events not implemented",
      "Authentication and authorization not fully implemented",
      "Partial documentation in know-how.txt"
    ],
    "known_issues": [
      "Validation errors for invalid input parameters",
      "Unauthorized access handling",
      "Possible loss of events if buffer is full",
      "Possible resource leak if SSE connection is not closed properly",
      "Dependency on local API availability",
      "Latency dependent on external LLM service",
      "Possible silent failure if environment variables are misconfigured"
    ],
    "performance_bottlenecks": [
      "Image capture and search operations can be costly",
      "Sequential await in typing per character can cause slowness",
      "Buffer management and number of concurrent SSE listeners",
      "Latency dependent on external LLM API",
      "Potential contention in singletons under high concurrency"
    ],
    "migration_status": [
      "Stable, no migrations in progress",
      "Updated to TypeScript 5.x and Fastify 4.x"
    ]
  },
  "team_preferences": {
    "code_review_focus": [
      "Conformity with lint rules",
      "Strict type safety",
      "Validation of input parameters",
      "Security of API key usage",
      "Separation of layers",
      "Correct use of dependency injection",
      "Clarity in logging and error handling",
      "Test coverage",
      "Consistent error handling",
      "Performance and security"
    ],
    "documentation_requirements": [
      "Clear documentation of endpoints and usage examples",
      "JSDoc for all public methods and interfaces",
      "Document environment variables and their usage",
      "Comments in Portuguese for context"
    ],
    "communication_style": [
      "Clear and objective comments",
      "Technical and concise comments",
      "Use of Portuguese for context and English for technical terms",
      "Objective PR descriptions"
    ],
    "decision_log": [
      "Adoption of Clean Architecture for maintainability",
      "Use of Fastify for high performance",
      "Use of TSyringe for dependency injection",
      "Use of Zod for declarative validation",
      "API key authentication chosen for simplicity",
      "Use of SSE for real-time event streaming",
      "Singletons for global event management",
      "Immutability of configuration for safety",
      "Logging with pino for performance and structure"
    ]
  },
  "api_specifications": {
    "api_style": ["REST", "REST with Server-Sent Events (SSE)"],
    "versioning_strategy": ["URI versioning (e.g., /api/v1/)"],
    "response_formats": [
      "JSON for most endpoints",
      "text/event-stream for SSE",
      "Base64 encoded images"
    ],
    "rate_limiting": [
      "Configurable via environment variable INPUT_EVENT_RATE",
      "Max event rate enforced per endpoint"
    ]
  },
  "deployment_context": {
    "environments": ["development", "staging", "production", "test"],
    "deployment_method": [
      "PM2 process manager",
      "Docker container",
      "CI/CD pipeline",
      "Kubernetes"
    ],
    "environment_variables": [
      "NODE_ENV",
      "PORT",
      "HOST",
      "LOG_LEVEL",
      "API_KEY",
      "OPENAI_API_KEY",
      "RECORDER_INCLUDE_SCREENSHOT",
      "RECORDER_MOVE_INTERVAL_MS",
      "RECORDER_MAX_SCREENSHOT_SIZE",
      "INPUT_EVENT_RATE",
      "INPUT_EVENT_BUFFER",
      "INPUT_EVENT_HEARTBEAT",
      "INPUT_EVENT_MAX_AGE",
      "KEYBOARD_DEFAULT_MODE",
      "KEYBOARD_MAX_TEXT_LENGTH",
      "KEYBOARD_DEFAULT_DELAY_PER_CHAR",
      "KEYBOARD_MAX_DELAY",
      "KEYBOARD_BATCH_SIZE",
      "LLM_API_KEY"
    ],
    "infrastructure_constraints": [
      "Accessibility permissions required on macOS",
      "DISPLAY variable required on Linux",
      "Memory limit of 1GB for automatic restart",
      "Stable SSE server required",
      "Cross-platform support (Windows, Linux, macOS)",
      "Hardware access required for automation",
      "Environment variables must be correctly configured",
      "Persistent SSE connections may limit scalability",
      "Network stability required for external LLM API"
    ]
  },
  "lastCommitHash": "d5076eeb0aeaba62817b90511338958b2fceec51"
}

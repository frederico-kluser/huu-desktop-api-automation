{
  "project_metadata": {
    "name": "NutJS Desktop Automation API â€“ Web/Mobile/Desktop automation backend with AI/LLM integration, input event capture, and RESTful API for mouse, keyboard, clipboard, and screen control",
    "domain": [
      "Web/Mobile/Desktop Automation",
      "AI/LLM Integration",
      "Backend API",
      "RESTful API",
      "Desktop Input Event Capture",
      "Clipboard Management",
      "Screen Capture",
      "Keyboard and Mouse Control",
      "UI Automation",
      "Test Automation",
      "Software Development",
      "Event Streaming (SSE)",
      "Command Execution",
      "Computer Vision",
      "Natural Language Processing",
      "Frontend Web Application",
      "Status Monitoring",
      "DevOps"
    ],
    "current_phase": [
      "Development",
      "Production",
      "Maintenance",
      "Stable Configuration",
      "MVP",
      "Testing Automation",
      "Debugging"
    ],
    "critical_business_rules": [
      "API key authentication required for sensitive endpoints",
      "Strict input validation using JSON Schema/Zod",
      "Clipboard content limited to 1 MB",
      "Text input must be non-empty and not exceed 10,000 characters",
      "Key combinations must use allowed modifiers and have 1-5 keys",
      "Timing values must be non-negative and not exceed 300,000ms",
      "Mouse and screen coordinates must be within valid screen bounds",
      "Consistent error response format with proper HTTP status codes",
      "No sensitive data leakage in production logs",
      "Environment variables must be loaded and validated per environment",
      "Rate limiting to prevent overload (max 50,000 events/s)",
      "Buffer size and event age must be within configured limits",
      "Singleton pattern for event dispatcher and buffer",
      "Consistent logging for audit and debugging",
      "80% minimum test coverage for critical modules",
      "No emission of test files in production build",
      "LLM requests must respect token and temperature limits",
      "Output parsing must fallback safely on error",
      "API versioning must be respected",
      "SPA and API routes must not conflict",
      "Graceful shutdown to prevent data loss",
      "Consistent UI responsiveness and error feedback",
      "Unique IDs for actions and events",
      "No concurrent execution of conflicting actions",
      "Secure handling of API keys and environment variables"
    ]
  },
  "technical_stack": {
    "primary_language": [
      "TypeScript 5.x",
      "Node.js 18+",
      "JavaScript (ES2022+)",
      "React 18.x",
      "HTML5",
      "CSS3"
    ],
    "frameworks": [
      "Fastify 4.x",
      "React 18.x",
      "Jest 29.x",
      "Webpack 5.x",
      "TSyringe",
      "Zod 3.x",
      "LangChain",
      "NutJS",
      "React-Bootstrap 2.x",
      "React Router DOM 6.x",
      "dotenv 16.x",
      "pino 8.x",
      "uiohook-napi"
    ],
    "databases": ["None (stateless, uses localStorage for frontend state)"],
    "external_services": [
      "OpenAI API",
      "DeepSeek API",
      "NutJS",
      "clipboardy",
      "sharp",
      "nanoid",
      "LangChain LLM API",
      "Server-Sent Events (SSE)",
      "Environment variables via dotenv",
      "Custom logger (pino)",
      "APIs for LLM models (gpt-4.1, deepseek-coder, etc.)"
    ],
    "package_manager": ["npm", "yarn"]
  },
  "architecture_patterns": {
    "design_pattern": [
      "Clean Architecture",
      "Dependency Injection",
      "Modular Architecture",
      "RESTful API",
      "Event-driven (SSE)",
      "Singleton",
      "Adapter Pattern",
      "Factory Pattern",
      "DTO Pattern",
      "Schema Validation",
      "Service Layer",
      "Observer Pattern",
      "Plugin Pattern",
      "Component-Based Architecture (frontend)",
      "SPA (Single Page Application)"
    ],
    "folder_structure": [
      "src/ (main source code)",
      "dist/ (build output)",
      "web/ (frontend React app)",
      "tests/ (unit and integration tests)",
      "config/ (environment and logger configs)",
      "domain/ (entities, enums, interfaces)",
      "application/services/ (business logic)",
      "infrastructure/adapters/ (external integrations)",
      "interface/controllers/ (API controllers)",
      "dto/ (data transfer objects and schemas)",
      "schemas/ (validation schemas)",
      "types/ (TypeScript types)",
      "public/ (static assets for frontend)"
    ],
    "naming_conventions": [
      "UPPER_SNAKE_CASE for environment variables",
      "camelCase for variables and functions",
      "PascalCase for classes, types, and interfaces",
      "kebab-case for files and endpoints",
      "Suffix 'Service' for service classes",
      "Prefix 'I' for interfaces",
      "Suffix 'Schema' for validation schemas",
      "Files with .ts/.tsx extensions for TypeScript"
    ],
    "module_boundaries": [
      "Clear separation between backend (API) and frontend (React)",
      "Domain layer independent from Application and Infrastructure",
      "Application depends on Domain",
      "Infrastructure depends on Application",
      "Controllers depend on services via DI",
      "Validation schemas isolated from business logic",
      "DTOs and schemas separate from domain entities",
      "Config, types, and services separated",
      "Mocks isolated in tests",
      "Frontend components isolated from API types"
    ]
  },
  "code_standards": {
    "style_guide": [
      "Airbnb JavaScript/TypeScript Style Guide",
      "ESLint Recommended",
      "Prettier",
      "TypeScript ESLint Recommended"
    ],
    "linting_rules": [
      "ESLint with @typescript-eslint plugin",
      "No explicit any",
      "no-unused-vars: error (ignore args starting with _)",
      "strict typing",
      "eslint-config-prettier",
      "plugin:react/recommended",
      "plugin:react-hooks/recommended"
    ],
    "formatting": [
      "Prettier with default config",
      "semi: true",
      "singleQuote: true",
      "trailingComma: all",
      "printWidth: 100",
      "tabWidth: 2",
      "Integration with ESLint"
    ],
    "documentation_style": [
      "JSDoc for public methods, classes, and interfaces",
      "Markdown comments for endpoints and parameters",
      "Inline comments in Portuguese for context"
    ],
    "type_checking": [
      "Strict TypeScript (strict mode enabled)",
      "Types via Zod for runtime validation",
      "No implicit any",
      "StrictNullChecks",
      "TypeScript typings for payloads and responses"
    ]
  },
  "testing_strategy": {
    "test_framework": ["Jest 29.x", "ts-jest", "React Testing Library"],
    "test_structure": [
      "tests/unit for unit tests",
      "tests/integration for integration tests",
      "tests/components for UI tests",
      "tests/hooks for custom hooks",
      "__tests__ folders alongside source files"
    ],
    "coverage_requirements": [
      "Minimum 80% coverage for statements, branches, functions, and lines",
      ">= 90% for DTOs and schemas",
      ">= 80% for critical modules"
    ],
    "test_patterns": [
      "AAA (Arrange-Act-Assert)",
      "Given-When-Then",
      "Mocks for external dependencies",
      "Snapshot testing for UI"
    ],
    "mocking_approach": [
      "Jest mocks and spies",
      "jest.mock for external modules",
      "Mocks for clipboardy, pino, nanoid, and adapters",
      "Mocking Fastify request and reply",
      "Mock global for localStorage",
      "Mocks for LLM responses and adapters"
    ]
  },
  "development_workflow": {
    "branch_strategy": ["GitHub Flow", "git Flow"],
    "commit_conventions": ["Conventional Commits"],
    "pr_requirements": [
      "Code review mandatory",
      "Passing CI checks",
      "Automated lint and test checks",
      "At least one reviewer approval"
    ],
    "ci_cd_pipeline": [
      "Build, lint, test, and deploy automated via GitHub Actions",
      "Unit and integration tests",
      "Coverage reporting",
      "Deploy to staging and production"
    ]
  },
  "commands": {
    "setup": [
      "npm install",
      "cp .env.example .env",
      "npm install && npm run build",
      "./install_dependencies.sh"
    ],
    "install": ["npm install", "npm ci"],
    "dev": [
      "npm run dev",
      "npm run dev:web",
      "npm run dev:full",
      "webpack serve --config webpack.config.js",
      "npm start"
    ],
    "test": [
      "npm test",
      "npm run test",
      "npm run test:unit",
      "npm run test:integration",
      "npm run test:coverage",
      "npm test -- --coverage"
    ],
    "build": [
      "npm run build",
      "npm run build:web",
      "npm run build:prod",
      "tsc --build",
      "webpack --config webpack.config.js"
    ],
    "lint": ["npm run lint", "eslint . --ext .ts", "npm run lint:fix"],
    "format": ["npm run format", "prettier --write .", "npm run format:check"]
  },
  "security_constraints": {
    "authentication_method": ["API key via HTTP header 'x-api-key'", "JWT (for external services)"],
    "authorization_rules": [
      "API key must be valid and authorized for endpoint access",
      "Role-based Access Control (RBAC) for future extensibility",
      "Access restricted to streaming and screen capture via authentication middleware"
    ],
    "sensitive_data": [
      "API keys for OpenAI and DeepSeek",
      "Clipboard content (max 1 MB)",
      "Environment variables for configuration",
      "User input event data (mouse, keyboard)",
      "Base64 image data (not stored, max 1 MB)",
      "Prompt and LLM responses (handled with confidentiality)"
    ],
    "security_headers": [
      "Content-Security-Policy",
      "X-Frame-Options",
      "Strict-Transport-Security",
      "Content-type: application/json",
      "x-api-key required in header",
      "Cache-Control: no-cache",
      "Connection: keep-alive",
      "X-Accel-Buffering: no"
    ],
    "encryption_requirements": [
      "TLS/HTTPS for all external and internal API communication",
      "Environment variables must not expose sensitive data",
      "No sensitive data stored at rest",
      "Clipboard and image data handled in-memory only"
    ]
  },
  "performance_requirements": {
    "response_time_limits": [
      "API responses < 200ms for standard operations",
      "Screen capture and LLM responses < 5000ms",
      "Real-time event streaming with minimal latency",
      "Keyboard and clipboard operations < 100ms",
      "Status checks < 1s",
      "Timeouts for parsing and LLM requests configurable"
    ],
    "optimization_priorities": [
      "Low latency for automation and event streaming",
      "Efficient memory usage for event buffers",
      "Fast build and test cycles",
      "Validation efficiency to minimize request overhead",
      "Performance optimized for production, legibility in development",
      "Balance between speed and accuracy for input simulation"
    ],
    "caching_strategy": [
      "In-memory circular buffer for recent events",
      "Cache localStorage with TTL for status checks",
      "No persistent cache for dynamic operations",
      "Config loaded once at startup"
    ],
    "scalability_considerations": [
      "Horizontal scalability via Fastify and Node.js cluster",
      "Support for multiple concurrent SSE clients",
      "Configurable buffer and batch sizes for high event throughput",
      "Modular architecture for easy extension",
      "Frontend and backend can scale independently",
      "Singletons limit per-process state, but can scale horizontally"
    ]
  },
  "error_handling": {
    "error_format": [
      "Standard JSON with fields: success, error, code, details",
      "Zod validation error format for input validation",
      "CommandResult with success:boolean, data?:object, error?:string",
      "Consistent error response for all endpoints"
    ],
    "logging_strategy": [
      "Structured logging with pino (info, warn, error, debug)",
      "Log level configurable via LOG_LEVEL",
      "Logs separated for errors and standard output",
      "Sensitive data masked in production logs",
      "Human-readable logs in development"
    ],
    "monitoring_tools": [
      "Sentry for production error monitoring",
      "PM2 internal monitoring",
      "Custom logger with possible integration to external systems"
    ],
    "error_recovery": [
      "Automatic retries for transient failures",
      "Graceful shutdown on critical errors",
      "Fallbacks for output parsing errors",
      "Reject invalid requests with HTTP 400 and descriptive message",
      "Buffer and event dispatcher reset on failure",
      "No sensitive data leakage on error"
    ]
  },
  "dependencies_context": {
    "critical_dependencies": [
      "OpenAI API",
      "DeepSeek API",
      "Fastify",
      "TypeScript",
      "Jest",
      "NutJS",
      "TSyringe",
      "Zod",
      "clipboardy",
      "pino",
      "LangChain",
      "uiohook-napi",
      "React",
      "Webpack",
      "dotenv",
      "nanoid",
      "sharp",
      "React-Bootstrap",
      "React Router DOM"
    ],
    "deprecated_packages": ["None"],
    "version_constraints": [
      "Node.js >=18",
      "TypeScript 5.x",
      "Fastify 4.x",
      "Zod 3.x",
      "React 18.x",
      "React-Bootstrap 2.x",
      "dotenv 16.x",
      "clipboardy >=3.0.0",
      "nanoid >=4.0.0",
      "Webpack 5.x"
    ],
    "internal_packages": [
      "src (main source code)",
      "web (frontend)",
      "domain/interfaces",
      "domain/entities",
      "application/services",
      "infrastructure/adapters",
      "interface/controllers",
      "dto",
      "schemas",
      "types"
    ]
  },
  "current_challenges": {
    "technical_debt": [
      "Refactoring legacy JavaScript modules to TypeScript",
      "Improve test coverage for edge cases (clipboard, input events)",
      "Enhance error handling granularity",
      "Validation of environment variables could be more robust",
      "Authentication and authorization not fully implemented",
      "Documentation needs more detail",
      "Maintain backward compatibility with legacy formats",
      "Improve fallback and error handling in complex parsing",
      "API key exposure risk in some scripts",
      "UI error feedback could be improved"
    ],
    "known_issues": [
      "Inconsistencies in local development environments",
      "Clipboard access may fail on some OS configurations",
      "macOS Accessibility permissions required for input capture",
      "Possible event loss on buffer overflow",
      "Rate limiting may drop events during spikes",
      "Performance impact for long text typing with high delays",
      "Dependency on local API availability",
      "Possible exposure of API key in frontend",
      "Cache may be cleared if invalid JSON detected",
      "No explicit concurrency control for actions"
    ],
    "performance_bottlenecks": [
      "Image processing (sharp) can be resource-intensive",
      "Sequential await in typing may cause slowdowns for long texts",
      "SSE streaming overhead with many concurrent clients",
      "Buffer growth without pruning can impact memory",
      "Delays in input simulation can impact total execution time",
      "Parsing and validation of large schemas may impact performance"
    ],
    "migration_status": [
      "Migration to TypeScript completed",
      "Jest and Fastify updated to latest versions",
      "Gradual migration from legacy to dynamic output formats ongoing",
      "Stable, no major migrations in progress"
    ]
  },
  "team_preferences": {
    "code_review_focus": [
      "Test coverage",
      "Code quality",
      "Linting compliance",
      "TypeScript type safety",
      "Security and input validation",
      "Consistent error handling and logging",
      "Separation of concerns",
      "Modularity and maintainability",
      "Responsiveness and UI feedback"
    ],
    "documentation_requirements": [
      "Clear documentation via JSDoc for all public APIs and methods",
      "README and endpoint examples",
      "Document environment variables and usage",
      "JSDoc for schemas and DTOs",
      "Inline comments in Portuguese for context"
    ],
    "communication_style": [
      "Objective and technical comments",
      "Markdown for PRs",
      "Portuguese for context and comments",
      "Conventional Commits for commit messages",
      "Clear and concise PR descriptions"
    ],
    "decision_log": [
      "Adoption of Clean Architecture and modular separation",
      "Use of Fastify for backend and React for frontend",
      "API key for authentication",
      "TSyringe for dependency injection",
      "Zod for validation and type safety",
      "Pino for structured logging",
      "Jest for testing",
      "Webpack for frontend build",
      "LocalStorage for frontend state",
      "SSE for real-time event streaming",
      "React-Bootstrap for UI",
      "Conventional Commits for commit messages"
    ]
  },
  "api_specifications": {
    "api_style": ["RESTful", "REST with SSE endpoints", "Internal event dispatching API"],
    "versioning_strategy": ["URI versioning (e.g., /api/v1)", "Prefix /api/v1 for versioning"],
    "response_formats": [
      "application/json",
      "Standard JSON: { success, data, error }",
      "Base64 encoded images",
      "text/event-stream for SSE",
      "CommandResult with success, data, error"
    ],
    "rate_limiting": [
      "Configurable via environment variable (maxRate)",
      "Default 50,000 events per second",
      "Recommended 1000 requests per minute per IP for API"
    ]
  },
  "deployment_context": {
    "environments": ["development (http://localhost:3000)", "staging", "production", "test"],
    "deployment_method": [
      "PM2 process manager",
      "Docker container",
      "CI/CD pipeline via GitHub Actions",
      "Webpack for frontend static hosting"
    ],
    "environment_variables": [
      "NODE_ENV",
      "PORT",
      "LOG_LEVEL",
      "API_KEY",
      "OPENAI_API_KEY",
      "DEEPSEEK_API_KEY",
      "INPUT_EVENT_BUFFER",
      "INPUT_EVENT_RATE",
      "INPUT_EVENT_HEARTBEAT",
      "KEYBOARD_MAX_TEXT_LENGTH",
      "KEYBOARD_DEFAULT_DELAY_PER_CHAR",
      "MOUSE_MIN_DUR",
      "MOUSE_MAX_DUR",
      "MOUSE_SAMPLE_RATE",
      "MOUSE_STREAM_INTERVAL",
      "REACT_APP_API_URL",
      "REACT_APP_GITHUB_DOCS_URL"
    ],
    "infrastructure_constraints": [
      "Memory limits for buffers and image processing",
      "macOS Accessibility permissions required for input capture",
      "Firewall and network restrictions",
      "Support for Windows, Linux, and macOS",
      "Environment variables must be configured correctly",
      "Persistent SSE connections required",
      "Local API must be running for automation",
      "No sensitive data stored at rest"
    ]
  },
  "lastCommitHash": "9f9b2ebfe229407779b88f5788d6ec25098b84fe"
}

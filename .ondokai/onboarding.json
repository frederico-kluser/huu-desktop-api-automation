{
  "project_metadata": {
    "name": "NutJS REST API for Desktop Automation with LLM Integration",
    "domain": [
      "Backend",
      "Desktop Automation",
      "Web/Mobile/Desktop",
      "AI Integration",
      "Clipboard Management",
      "Screen Capture",
      "Keyboard and Mouse Control",
      "Input Automation",
      "Robotic Process Automation (RPA)",
      "Computer Vision",
      "Natural Language Processing",
      "Large Language Models",
      "API Development",
      "Software Testing",
      "Event Streaming",
      "Security",
      "DevOps"
    ],
    "current_phase": [
      "Development",
      "Production",
      "Maintenance",
      "Stable",
      "MVP",
      "Testing Automation",
      "Debugging"
    ],
    "critical_business_rules": [
      "API key authentication required for all sensitive endpoints",
      "Strict input validation using JSON Schema and Zod",
      "Clipboard content must not exceed 1 MB",
      "Text input must be non-empty and free of control characters",
      "Key combinations must use only allowed modifiers and letters (1-5 keys)",
      "Timing values must be non-negative integers and not exceed 300000ms",
      "Mouse and screen coordinates must be within valid screen bounds",
      "Consistent error response format with proper HTTP status codes",
      "No leakage of sensitive error details in production",
      "Rate limiting to prevent overload (max 50000 events/s)",
      "Buffer size must be between 1 and 100000",
      "Heartbeat interval must be between 1000 and 300000 ms",
      "Max event age must be between 1000 and 3600000 ms",
      "Max text length must be between 1 and 100000",
      "Production logs must be performant and minimal; development logs must be human-readable",
      "No additional properties allowed in requests",
      "Input data must conform to JSON Schema Draft 7",
      "Reliable event streaming and accurate command execution",
      "Consistent clipboard state and graceful error handling",
      "Secure route registration and singleton service instantiation",
      "Environment variables must be defined and not exposed in code",
      "Strict type checking and linting enforced",
      "80% minimum test coverage",
      "Consistent logging for audit and debugging",
      "Timeouts and retries configured for external API calls",
      "LLM requests must respect token and temperature limits",
      "Fallback to safe defaults on parsing or validation errors",
      "macOS Accessibility permissions required for global input capture",
      "Listeners must be managed to avoid memory leaks",
      "No resource leaks on shutdown; graceful service stop"
    ]
  },
  "technical_stack": {
    "primary_language": ["TypeScript 5.x", "Node.js 18.x", "JavaScript ES2020+"],
    "frameworks": [
      "Fastify 4.x",
      "Jest 29.x",
      "ESLint",
      "PM2",
      "TSyringe",
      "Zod",
      "NutJS",
      "Pino",
      "LangChain",
      "uiohook-napi"
    ],
    "databases": ["None"],
    "external_services": [
      "OpenAI API",
      "DeepSeek API",
      "LLM models (gpt-4.1, gpt-4.1-mini, deepseek-chat, deepseek-reasoner, deepseek-coder)",
      "NutJS",
      "clipboardy",
      "sharp",
      "dotenv",
      "nanoid",
      "Server-Sent Events (SSE)",
      "LangChain LLM API",
      "Custom Logger Service",
      "uiohook-napi"
    ],
    "package_manager": ["npm", "yarn"]
  },
  "architecture_patterns": {
    "design_pattern": [
      "Clean Architecture",
      "Modular Architecture",
      "RESTful API",
      "Event-driven",
      "Dependency Injection",
      "Singleton",
      "Adapter Pattern",
      "Service Layer",
      "Schema Validation",
      "DTO Pattern",
      "Observer Pattern",
      "Factory Method",
      "Strategy Pattern",
      "Rate Limiter",
      "Centralized Error Handling",
      "Plugin-based Architecture"
    ],
    "folder_structure": [
      "src/ (source code)",
      "dist/ (build output)",
      "tests/ (unit and integration tests)",
      "config/ (configuration and logger)",
      "domain/ (entities and interfaces)",
      "application/services (business logic and services)",
      "infrastructure/adapters (external integrations)",
      "interface/controllers (API controllers and middleware)",
      "schemas/ (validation schemas)",
      "types/ (shared types and enums)",
      "logs/ (log files)",
      "coverage/ (test coverage reports)"
    ],
    "naming_conventions": [
      "camelCase for variables and functions",
      "PascalCase for classes and interfaces",
      "UPPER_SNAKE_CASE for environment variables and constants",
      "kebab-case for files and routes",
      "Suffix 'Service' for service classes",
      "Prefix 'I' for interfaces",
      "Suffix 'Controller' for controllers",
      "Suffix 'Schema' for validation schemas",
      "DTOs with 'Request' suffix"
    ],
    "module_boundaries": [
      "Clear separation between domain, application, infrastructure, and interface layers",
      "Controllers depend on services via dependency injection",
      "Validation schemas isolated from business logic",
      "Singletons for shared state (e.g., EventBuffer, Dispatcher)",
      "Services encapsulate business logic and hardware/system interactions",
      "Types and DTOs isolated for strong typing",
      "Configuration isolated in dedicated modules",
      "External dependencies injected via TSyringe",
      "Test code isolated from production code"
    ]
  },
  "code_standards": {
    "style_guide": ["Airbnb TypeScript Style Guide", "ESLint Recommended", "Prettier"],
    "linting_rules": [
      "ESLint with @typescript-eslint plugin",
      "No explicit any",
      "Strict typing",
      "no-unused-vars with argsIgnorePattern '^_'",
      "eslint-config-prettier",
      "eslint-plugin-prettier"
    ],
    "formatting": [
      "Prettier integration via plugin:prettier/recommended",
      "semi: true",
      "singleQuote: true",
      "trailingComma: all",
      "tabWidth: 2",
      "printWidth: 100",
      "Indentation: 2 spaces"
    ],
    "documentation_style": [
      "JSDoc for public methods, classes, and interfaces",
      "Markdown comments for endpoint and parameter descriptions",
      "Inline comments in Portuguese for context"
    ],
    "type_checking": [
      "Strict TypeScript (strict mode enabled)",
      "TypeScript typings for payloads and responses",
      "Zod for runtime validation",
      "StrictNullChecks",
      "noImplicitAny"
    ]
  },
  "testing_strategy": {
    "test_framework": ["Jest 29.x", "ts-jest"],
    "test_structure": [
      "tests/unit for unit tests",
      "tests/integration for integration tests",
      "tests/services for service tests",
      "tests/middleware for middleware tests",
      "tests/schemas for schema validation tests",
      "Coverage stored in coverage/"
    ],
    "coverage_requirements": [
      "Minimum 80% coverage for statements, branches, functions, and lines"
    ],
    "test_patterns": [
      "Arrange-Act-Assert (AAA)",
      "**/tests/**/*.test.ts",
      "**/tests/**/*.spec.ts",
      "Mocks for external dependencies",
      "Parameterized tests for multiple cases"
    ],
    "mocking_approach": [
      "Jest mocks for external services and dependencies",
      "Mocks for clipboardy, nanoid, and logger",
      "Mocks for NutJS and uiohook-napi",
      "Mocks for FastifyRequest and FastifyReply",
      "Mocks for environment variables"
    ]
  },
  "development_workflow": {
    "branch_strategy": ["GitHub Flow with feature, main, and hotfix branches"],
    "commit_conventions": ["Conventional Commits"],
    "pr_requirements": [
      "Code review mandatory",
      "Passing CI checks",
      "Lint and test checks",
      "Automated tests passing"
    ],
    "ci_cd_pipeline": [
      "Build, lint, test, and deploy automated via GitHub Actions",
      "Unit tests",
      "Linting",
      "Deploy"
    ]
  },
  "commands": {
    "setup": ["npm install", "cp .env.example .env", "npm run prepare"],
    "install": ["npm install"],
    "dev": ["npm run dev", "tsc --watch"],
    "test": ["npm test", "jest", "npm test -- --coverage"],
    "build": ["npm run build", "tsc"],
    "lint": ["npm run lint", "eslint . --ext .ts,.tsx"],
    "format": ["npm run format", "prettier --write ."]
  },
  "security_constraints": {
    "authentication_method": ["API key via HTTP header 'x-api-key'"],
    "authorization_rules": [
      "Access restricted to users with valid API key",
      "No role-based access levels",
      "Access control via Fastify middleware"
    ],
    "sensitive_data": [
      "API keys for OpenAI and DeepSeek",
      "Clipboard content (max 1 MB)",
      "Environment variables for configuration",
      "User input data (keyboard, mouse, screen)",
      "Prompt and LLM responses",
      "No sensitive error details exposed in production"
    ],
    "security_headers": [
      "Content-Type: application/json",
      "x-api-key required in header",
      "Accept: text/event-stream for SSE",
      "Content-Security-Policy",
      "X-Content-Type-Options",
      "Cache-Control: no-cache",
      "Connection: keep-alive",
      "X-Accel-Buffering: no"
    ],
    "encryption_requirements": [
      "HTTPS required for secure transport",
      "TLS for external API communication",
      "Environment variables must not be exposed",
      "No encryption for in-memory buffers"
    ]
  },
  "performance_requirements": {
    "response_time_limits": [
      "Standard operations must respond in under 5000ms",
      "Low latency for automation commands and REST API",
      "Real-time event streaming with minimal latency",
      "Mouse and screen operations should respond in under 200ms",
      "LLM completions ideally < 1s",
      "Timeouts and delays configurable via environment variables"
    ],
    "optimization_priorities": [
      "Speed and responsiveness for input and capture operations",
      "Efficient memory usage to prevent crashes",
      "Validation efficiency to minimize request overhead",
      "Low latency and high availability",
      "Efficient logging and error handling",
      "Balance between speed and accuracy for recognition and automation"
    ],
    "caching_strategy": [
      "Circular buffer acts as cache for recent events",
      "Configuration loaded once at startup",
      "No persistent cache for dynamic data",
      "Schema cache with configurable TTL"
    ],
    "scalability_considerations": [
      "Support for multiple concurrent requests",
      "Horizontal scalability via Fastify and Node.js cluster",
      "Singletons for shared state, with care for horizontal scaling",
      "Batch size and buffer limits configurable for high event volume",
      "Support for multiple SSE clients",
      "Modular architecture and DI for extensibility"
    ]
  },
  "error_handling": {
    "error_format": [
      "JSON with fields: success, error, code, and details",
      "Zod validation error format",
      "CommandResult with success, data, and error",
      "Consistent error response with proper HTTP status codes"
    ],
    "logging_strategy": [
      "Structured logging with Pino",
      "Log level configurable via LOG_LEVEL",
      "Logs stored in logs/ directory",
      "Sensitive data masked in logs",
      "Development logs are human-readable; production logs are minimal"
    ],
    "monitoring_tools": [
      "PM2 internal monitoring",
      "Custom logger (Pino), integrable with external systems",
      "Endpoint /health for basic monitoring",
      "Compatible with external tools (e.g., ELK, Datadog, Prometheus)"
    ],
    "error_recovery": [
      "Pre-validation to avoid invalid command execution",
      "Centralized error handling via Fastify middleware",
      "Graceful shutdown to prevent resource leaks",
      "Fallback to safe defaults on parsing/validation errors",
      "Retries for transient external API failures",
      "Listeners managed to avoid memory leaks",
      "Fail-fast on critical configuration errors"
    ]
  },
  "dependencies_context": {
    "critical_dependencies": [
      "OpenAI API",
      "DeepSeek API",
      "Jest",
      "ESLint",
      "PM2",
      "TSyringe",
      "Zod",
      "Fastify",
      "clipboardy",
      "@nut-tree-fork/nut-js",
      "pino",
      "nanoid",
      "LangChain",
      "sharp",
      "uiohook-napi",
      "dotenv",
      "typescript"
    ],
    "deprecated_packages": ["None"],
    "version_constraints": [
      "TypeScript 5.x",
      "Node.js >=18",
      "Fastify 4.x",
      "Zod 3.x",
      "clipboardy >=3.0.0",
      "tsyringe 4.x",
      "Jest 29.x",
      "dotenv >=16.0.0"
    ],
    "internal_packages": [
      "@nut-tree-fork/*",
      "domain/interfaces",
      "domain/entities",
      "application/services",
      "infrastructure/adapters",
      "interface/controllers",
      "schemas",
      "types",
      "config"
    ]
  },
  "current_challenges": {
    "technical_debt": [
      "Need for more comprehensive tests for clipboard and streaming edge cases",
      "Improve error handling granularity",
      "Validation of environment variables could be more robust",
      "Documentation could be more detailed",
      "Authentication and authorization not fully implemented in all routes",
      "Fallback and error handling in complex parsing could be improved",
      "Maintain compatibility with legacy and dynamic output formats",
      "Coverage for edge cases in event streaming and LLM integration"
    ],
    "known_issues": [
      "macOS Accessibility permissions required for global input capture",
      "Possible event loss if buffer is full",
      "Rate limiting may drop events during spikes",
      "Dependency on local API availability",
      "Possible lack of authentication on some endpoints",
      "Potential platform compatibility issues with uiohook-napi",
      "Performance may be impacted for long texts with high delays",
      "Possible resource leaks if SSE connections are not closed properly",
      "Dependency on environment variables for configuration"
    ],
    "performance_bottlenecks": [
      "Image capture and recognition operations can be costly",
      "Sequential await in per-character typing may cause slowness",
      "Buffer management and listeners under high load",
      "Parsing and validation of large schemas may impact performance",
      "Native library dependencies may affect throughput",
      "Potential event flooding mitigated by selective logging"
    ],
    "migration_status": [
      "Stable, no active migrations",
      "Migrated to TypeScript 5.x and Fastify 4.x",
      "Gradual migration from legacy to dynamic output format in progress"
    ]
  },
  "team_preferences": {
    "code_review_focus": [
      "Strict linting and type safety",
      "Avoid use of any",
      "Proper promise handling",
      "Input validation and schema correctness",
      "Security in authentication and environment variables",
      "Consistent error handling and logging",
      "Test coverage and isolation",
      "Separation of concerns and modularity",
      "Correct use of dependency injection",
      "Clarity and documentation"
    ],
    "documentation_requirements": [
      "Clear documentation of endpoints and usage examples",
      "JSDoc for all public methods and interfaces",
      "Documentation of environment variables and configuration",
      "Markdown comments for complex logic",
      "Continuous documentation in know-how.txt"
    ],
    "communication_style": [
      "Clear and objective comments in Portuguese for context",
      "Technical terms in English for precision",
      "Objective PR descriptions",
      "Use of emojis for log clarity",
      "Focus on collective learning"
    ],
    "decision_log": [
      "Adoption of Clean Architecture and Dependency Injection for maintainability",
      "Use of Fastify for high performance",
      "TSyringe for DI",
      "Zod for declarative validation",
      "Airbnb and Prettier for code style",
      "API key for simple authentication",
      "Singletons for shared state",
      "Buffer and rate limiter for event management",
      "LangChain for LLM integration",
      "Fallback to safe defaults on parsing errors",
      "Separation of test and production code",
      "Use of event-driven pattern for input capture"
    ]
  },
  "api_specifications": {
    "api_style": ["RESTful", "REST with SSE for streaming", "Internal event dispatching API"],
    "versioning_strategy": ["Versioning via URL (/api/v1/)"],
    "response_formats": [
      "JSON with fields: success, data, error",
      "Base64 encoded images",
      "text/event-stream for SSE",
      "CommandResult with success, data, and error",
      "Zod validation error format"
    ],
    "rate_limiting": [
      "Configurable via environment variable INPUT_EVENT_RATE",
      "Default limit 5000 events per second",
      "MaxRate setting for event streaming"
    ]
  },
  "deployment_context": {
    "environments": [
      "development",
      "staging",
      "production",
      "test",
      "Localhost (http://localhost:3000)"
    ],
    "deployment_method": [
      "PM2 process manager",
      "Docker container",
      "CI/CD pipeline via GitHub Actions",
      "Node.js runtime"
    ],
    "environment_variables": [
      "NODE_ENV",
      "PORT",
      "LOG_LEVEL",
      "API_KEY",
      "OPENAI_API_KEY",
      "DEEPSEEK_API_KEY",
      "INPUT_EVENT_BUFFER",
      "INPUT_EVENT_RATE",
      "INPUT_EVENT_HEARTBEAT",
      "INPUT_EVENT_MAX_AGE",
      "KEYBOARD_DEFAULT_MODE",
      "KEYBOARD_MAX_TEXT_LENGTH",
      "KEYBOARD_DEFAULT_DELAY_PER_CHAR",
      "KEYBOARD_MAX_DELAY",
      "KEYBOARD_BATCH_SIZE",
      "MOUSE_MIN_DUR",
      "MOUSE_MAX_DUR",
      "MOUSE_DEFAULT_SMOOTH",
      "MOUSE_SAMPLE_RATE",
      "MOUSE_STREAM_INTERVAL",
      "LLM_SERVICE_ENDPOINT",
      "CACHE_TTL",
      "ENABLE_CACHE"
    ],
    "infrastructure_constraints": [
      "macOS Accessibility permissions required",
      "DISPLAY variable on Linux",
      "Memory limit of 1GB for auto-restart",
      "Support for Windows, Linux, macOS",
      "Access to hardware for mouse and keyboard automation",
      "Persistent SSE connections require memory management",
      "Environment variables must be configured correctly",
      "Node.js runtime required",
      "Local API must be running on port 3000 for full functionality"
    ]
  },
  "lastCommitHash": "80fdc5e68f2497c194eb331d71ec582bfc693fde"
}

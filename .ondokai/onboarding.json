{
  "project_metadata": {
    "name": "NutJS REST API for Desktop Automation and User Input Event Streaming with LLM Integration",
    "domain": [
      "Desktop Automation",
      "Web/Mobile/Desktop",
      "User Input Simulation",
      "Screen Capture",
      "Event Streaming",
      "Clipboard Management",
      "Keyboard Automation",
      "Mouse Automation",
      "UI Automation",
      "API Integration",
      "Automated Testing",
      "Robotic Process Automation (RPA)",
      "Computer Vision",
      "Natural Language Processing",
      "Large Language Models",
      "AI-assisted Code Generation",
      "Software Development",
      "Backend API",
      "Validation",
      "Logging",
      "Security",
      "Authentication",
      "Error Handling",
      "Dependency Injection"
    ],
    "current_phase": [
      "Development",
      "Production",
      "Maintenance",
      "MVP",
      "Stable",
      "Testing and Validation"
    ],
    "critical_business_rules": [
      "API keys must be protected and never exposed in source code",
      "Strict validation of all input parameters and JSON schemas",
      "Mandatory authentication via x-api-key for sensitive endpoints and streaming",
      "Maintain data integrity and event order during streaming and automation",
      "Continuous availability of the API and event streaming",
      "Enforce memory and buffer size limits to prevent crashes",
      "Rate limiting to avoid overload (maxRate between 1 and 50000 events/s)",
      "Clipboard content must not exceed 1 MB",
      "Text input must be non-empty and not contain only control characters",
      "Key combinations must use only allowed modifiers and letters (1-5 keys)",
      "Timing values must be non-negative and not exceed 300000ms",
      "Screen region coordinates must be within valid screen bounds",
      "Mouse and keyboard actions must execute reliably and sequentially",
      "Consistent error response format with proper HTTP status codes",
      "No leakage of sensitive error details in production",
      "Request body must strictly conform to defined Zod schemas",
      "No additional properties allowed in requests",
      "Content must be a non-empty string",
      "Singleton services must be unique and registered correctly",
      "Controllers must be injectable",
      "Coverage minimum 80% for tests",
      "Production logs must be performant and minimal; development logs must be human-readable",
      "Graceful shutdown to avoid data loss",
      "Strict type checking and linting enforced",
      "Consistent clipboard state and reliable input simulation",
      "Fallback to safe defaults on parsing or model errors",
      "Strict limits for outputFormat and token usage for LLMs",
      "All dependencies must be registered correctly",
      "Proper error handling and logging for all operations"
    ]
  },
  "technical_stack": {
    "primary_language": ["TypeScript 5.x", "Node.js 18+", "JavaScript (ESM)"],
    "frameworks": [
      "Fastify 4.x",
      "Jest 29.x",
      "ESLint",
      "Prettier",
      "TSyringe",
      "Zod",
      "NutJS",
      "LangChain",
      "dotenv",
      "pino"
    ],
    "databases": ["None"],
    "external_services": [
      "OpenAI API",
      "DeepSeek API",
      "NutJS",
      "LangChain",
      "clipboardy",
      "sharp",
      "nanoid",
      "pino",
      "Server-Sent Events (SSE) endpoint",
      "Environment variables"
    ],
    "package_manager": ["npm", "yarn"]
  },
  "architecture_patterns": {
    "design_pattern": [
      "Modular Architecture",
      "Event-driven Architecture",
      "Dependency Injection",
      "REST API",
      "Schema Validation",
      "DTO Pattern",
      "Service Layer",
      "Singleton",
      "Observer Pattern",
      "Adapter Pattern",
      "Factory Pattern",
      "Controller Pattern",
      "Middleware Pattern",
      "Centralized Error Handling",
      "Declarative Validation",
      "Plugin-based Architecture",
      "Domain-Driven Design",
      "Configuration Object",
      "Strategy Pattern",
      "Rate Limiter"
    ],
    "folder_structure": [
      "src/",
      "dist/",
      "tests/",
      "config/",
      "domain/",
      "application/services",
      "infrastructure/adapters",
      "interface/controllers",
      "middleware/",
      "schemas/",
      "dto/",
      "types/",
      "logs/",
      "coverage/"
    ],
    "naming_conventions": [
      "camelCase for variables and functions",
      "PascalCase for classes, types, and interfaces",
      "UPPER_SNAKE_CASE for environment variables and constants",
      "kebab-case for files and endpoints",
      "Suffixes Service, Adapter, Controller for types",
      "Prefix 'I' for interfaces",
      "DTOs with suffix request",
      "Schemas with suffix Schema"
    ],
    "module_boundaries": [
      "Clear separation between domain, application, infrastructure, and interface layers",
      "Controllers depend on services via dependency injection",
      "Services encapsulate business logic and interact with adapters",
      "DTOs and schemas isolate validation and typing",
      "Validation separated from business logic",
      "Configuration isolated in dedicated modules",
      "Types and interfaces separated from implementation",
      "Middleware isolated for authentication and validation",
      "No circular dependencies; unidirectional dependency flow"
    ]
  },
  "code_standards": {
    "style_guide": ["Airbnb JavaScript/TypeScript Style Guide", "ESLint Recommended", "Prettier"],
    "linting_rules": [
      "ESLint with @typescript-eslint plugin",
      "no-explicit-any: error",
      "no-unused-vars: error with argsIgnorePattern '^_'",
      "strict typing",
      "eslint-config-prettier",
      "eslint-plugin-prettier"
    ],
    "formatting": [
      "Prettier integration via plugin:prettier/recommended",
      "semi: true",
      "singleQuote: true",
      "trailingComma: all",
      "printWidth: 100",
      "tabWidth: 2"
    ],
    "documentation_style": [
      "JSDoc for public methods, classes, and interfaces",
      "Markdown comments for endpoint descriptions",
      "Inline comments in Portuguese for context"
    ],
    "type_checking": [
      "Strict TypeScript (strict mode enabled)",
      "tsconfig with strict enabled",
      "Explicit types for parameters and returns",
      "Zod for runtime validation"
    ]
  },
  "testing_strategy": {
    "test_framework": ["Jest 29.x", "ts-jest"],
    "test_structure": [
      "tests/unit for unit tests",
      "tests/integration for integration tests",
      "tests/__tests__ for module-specific tests",
      "Coverage stored in coverage/",
      "Setup via jest.config.js"
    ],
    "coverage_requirements": [
      "Minimum 80% coverage for statements, branches, functions, and lines"
    ],
    "test_patterns": [
      "Arrange-Act-Assert (AAA)",
      "Mocks for external dependencies",
      "**/tests/**/*.test.ts",
      "**/tests/**/*.spec.ts"
    ],
    "mocking_approach": [
      "Jest mocks and fixtures for isolation",
      "Mocks for clipboardy, pino, nanoid, and external services",
      "Mocks for adapters and services",
      "Mocks for FastifyRequest and FastifyReply"
    ]
  },
  "development_workflow": {
    "branch_strategy": ["GitHub Flow with feature, main, and hotfix branches"],
    "commit_conventions": ["Conventional Commits"],
    "pr_requirements": [
      "Code review mandatory",
      "Passing CI checks",
      "Lint and test checks required"
    ],
    "ci_cd_pipeline": [
      "Build, lint, test, and deploy automated via GitHub Actions",
      "Unit and integration tests",
      "Deploy automatic to staging and production"
    ]
  },
  "commands": {
    "setup": ["npm install && cp .env.example .env", "npm run prepare"],
    "install": ["npm install"],
    "dev": ["npm run dev", "tsc --watch"],
    "test": ["npm test", "npm test -- --coverage"],
    "build": ["npm run build", "tsc"],
    "lint": ["npm run lint", "eslint . --ext .ts,.tsx"],
    "format": ["npm run format", "prettier --write ."]
  },
  "security_constraints": {
    "authentication_method": [
      "API key via header 'x-api-key'",
      "JWT (externally managed) for some integrations"
    ],
    "authorization_rules": [
      "Access to sensitive endpoints and streams restricted by valid API key",
      "API key validation on server side",
      "401 and 403 errors for unauthorized access"
    ],
    "sensitive_data": [
      "API keys for OpenAI and DeepSeek",
      "Environment variables for configuration",
      "Clipboard data (must be handled securely)",
      "User input events (mouse, keyboard)",
      "Base64 image data (screenshots)",
      "Prompt and LLM responses (must be treated confidentially)"
    ],
    "security_headers": [
      "Content-Type: application/json",
      "Accept: text/event-stream for SSE",
      "Header 'x-api-key' required",
      "Content-Security-Policy",
      "X-Content-Type-Options",
      "Cache-Control: no-cache",
      "Connection: keep-alive",
      "X-Accel-Buffering: no"
    ],
    "encryption_requirements": [
      "HTTPS required for all external communication",
      "API keys and sensitive data must be encrypted in transit",
      "TLS for communication with LLM APIs",
      "No sensitive data in logs or error messages"
    ]
  },
  "performance_requirements": {
    "response_time_limits": [
      "REST endpoints must respond in under 5000ms",
      "Low latency for SSE event streaming (<200ms)",
      "Automation actions should execute in under 200ms",
      "Typing and mouse actions must respect configured delays (max 300000ms)",
      "Screen capture and recognition must respond in under 5 seconds",
      "Immediate response for authentication (<100ms)",
      "Error responses must be fast to avoid UX impact"
    ],
    "optimization_priorities": [
      "Balance between speed and memory usage",
      "Efficient event dispatch and rate control",
      "Validation efficiency to minimize request overhead",
      "Performance optimized for production, legibility for development",
      "Graceful shutdown to avoid request loss",
      "Efficient logging and minimal overhead",
      "Low latency and high availability for streaming",
      "Efficient parsing and validation for LLM outputs"
    ],
    "caching_strategy": [
      "Circular buffer acts as cache for recent events",
      "Configuration loaded once at startup (immutable)",
      "Schema cache with configurable TTL",
      "No persistent cache for dynamic data"
    ],
    "scalability_considerations": [
      "Support for multiple concurrent SSE connections",
      "Horizontal scalability via Fastify and Node.js cluster",
      "Modular architecture for easy extension",
      "Configurable buffer and batch sizes for high event volume",
      "Singletons for core services, scalable with care",
      "Support for multiple LLM providers and output formats"
    ]
  },
  "error_handling": {
    "error_format": [
      "Standard JSON with fields: success, error, code, and details",
      "Zod validation error format for schema errors",
      "Consistent error response format for all endpoints",
      "Logs structured via pino"
    ],
    "logging_strategy": [
      "Log level configurable via LOG_LEVEL",
      "Structured logging with pino and pino-pretty",
      "Logs stored in logs/ directory",
      "Sensitive data masked in logs",
      "Debug mode enables detailed logs"
    ],
    "monitoring_tools": [
      "PM2 internal monitoring",
      "Integrable with external systems (e.g., ELK, Datadog, Sentry, Prometheus)"
    ],
    "error_recovery": [
      "Pre-validation and clear responses for input and authentication errors",
      "Graceful shutdown to avoid abrupt failures",
      "Fallback to safe defaults on parsing/model errors",
      "Strict rejection of invalid requests with HTTP 400",
      "No automatic retries; errors are logged and surfaced"
    ]
  },
  "dependencies_context": {
    "critical_dependencies": [
      "OpenAI API",
      "DeepSeek API",
      "NutJS library",
      "Fastify",
      "TSyringe",
      "Zod",
      "Jest",
      "ESLint",
      "Prettier",
      "clipboardy",
      "sharp",
      "nanoid",
      "LangChain",
      "dotenv",
      "pino"
    ],
    "deprecated_packages": ["None"],
    "version_constraints": [
      "TypeScript 5.x",
      "Node.js 18+",
      "Fastify 4.x",
      "Zod 3.x",
      "clipboardy >=3.0.0",
      "tsyringe 4.x",
      "Jest >=29",
      "dotenv >=16.0.0"
    ],
    "internal_packages": [
      "src/domain/interfaces",
      "src/domain/entities",
      "src/application/services",
      "src/infrastructure/adapters",
      "src/interface/controllers",
      "src/middleware",
      "src/schemas",
      "src/dto",
      "src/types",
      "src/config"
    ]
  },
  "current_challenges": {
    "technical_debt": [
      "Lack of advanced error handling and automatic reconnection for SSE",
      "Need for more comprehensive tests for clipboard and streaming edge cases",
      "Validation of environment variables could be more robust",
      "Partial documentation in know-how.txt",
      "Authentication and authorization not implemented in all endpoints",
      "Fallback and error handling in complex parsing could be improved",
      "Maintaining retrocompatibility increases complexity",
      "api key exposure in code (should be moved to environment variables)"
    ],
    "known_issues": [
      "Limitation on maximum outputFormat size for LLM",
      "Dependency on local endpoint and lack of fallback",
      "Possible loss of events if buffer is full or rate limit is hit",
      "Clipboard access may fail on OS with restricted permissions",
      "Possible resource leak if SSE connection is not closed properly",
      "Possible silent disconnection if heartbeat fails",
      "Dependency on environment variables may cause failures if not set",
      "Parsing may exceed timeout for very large schemas",
      "Mocks may become outdated with external library updates"
    ],
    "performance_bottlenecks": [
      "Type-checking analysis may impact lint performance",
      "Throttle required for mouse move events in SSE streaming",
      "Image capture and recognition operations can be costly",
      "Sequential await in typing per character may cause slowness",
      "Buffer may grow indefinitely without pruning",
      "Parsing and validation of complex outputFormat may impact performance",
      "High-frequency event streaming may stress server resources"
    ],
    "migration_status": [
      "Stable, no migrations in progress",
      "Migrated to TypeScript 5.x and Fastify 4.x",
      "Gradual migration from legacy to dynamic outputFormat in progress"
    ]
  },
  "team_preferences": {
    "code_review_focus": [
      "Strict linting and type safety",
      "Avoid use of any",
      "Correct promise handling",
      "Input validation and schema correctness",
      "Security of API key and authentication",
      "Separation of concerns and modularity",
      "Comprehensive test coverage",
      "Consistent error handling and logging",
      "Clarity in logs and documentation",
      "Performance and streaming reliability"
    ],
    "documentation_requirements": [
      "Clear documentation of endpoints and parameters in Markdown",
      "JSDoc for all public methods, interfaces, and schemas",
      "Comments in Portuguese for context",
      "Document environment variables and usage",
      "Update know-how.txt after major changes"
    ],
    "communication_style": [
      "Clear and objective comments",
      "Technical terms in English for precision",
      "Portuguese for context and explanations",
      "Objective PRs with detailed descriptions"
    ],
    "decision_log": [
      "Adoption of Fastify for high performance",
      "Use of SSE for real-time event streaming",
      "API key for authentication",
      "Use of Zod for declarative validation and type safety",
      "Domain-Driven Design for maintainability",
      "TSyringe for dependency injection",
      "Singletons for core services",
      "Prettier and ESLint for code consistency",
      "Strict type checking and fail-fast validation",
      "Modular architecture for scalability",
      "Fallback to safe defaults on parsing/model errors",
      "Mocks for test isolation",
      "Separation of controllers and routes",
      "Use of enums for LLM model integrity"
    ]
  },
  "api_specifications": {
    "api_style": [
      "REST with versioned endpoints (api/v1)",
      "Server-Sent Events (SSE) for real-time streaming"
    ],
    "versioning_strategy": ["Versioning via URL (/api/v1)"],
    "response_formats": [
      "JSON for REST endpoints",
      "text/event-stream for SSE",
      "Standardized CommandResult with success, data, and error fields",
      "Base64 encoded images for screen capture",
      "Zod-validated JSON objects"
    ],
    "rate_limiting": [
      "Configurable via environment variable INPUT_EVENT_RATE",
      "maxRate enforced per endpoint"
    ]
  },
  "deployment_context": {
    "environments": [
      "development",
      "staging",
      "production",
      "test",
      "localhost:3000 (development)"
    ],
    "deployment_method": [
      "PM2 process manager",
      "Docker container",
      "CI/CD pipeline via GitHub Actions",
      "Node.js runtime"
    ],
    "environment_variables": [
      "NODE_ENV",
      "PORT",
      "HOST",
      "LOG_LEVEL",
      "API_KEY",
      "OPENAI_API_KEY",
      "DEEPSEEK_API_KEY",
      "RECORDER_INCLUDE_SCREENSHOT",
      "RECORDER_MOVE_INTERVAL_MS",
      "RECORDER_MAX_SCREENSHOT_SIZE",
      "INPUT_EVENT_RATE",
      "INPUT_EVENT_BUFFER",
      "INPUT_EVENT_HEARTBEAT",
      "INPUT_EVENT_MAX_AGE",
      "KEYBOARD_DEFAULT_MODE",
      "KEYBOARD_MAX_TEXT_LENGTH",
      "KEYBOARD_DEFAULT_DELAY_PER_CHAR",
      "KEYBOARD_MAX_DELAY",
      "KEYBOARD_BATCH_SIZE",
      "MOUSE_MIN_DUR",
      "MOUSE_MAX_DUR",
      "MOUSE_DEFAULT_SMOOTH",
      "MOUSE_SAMPLE_RATE",
      "MOUSE_STREAM_INTERVAL",
      "LLM_API_KEY",
      "LLM_SERVICE_ENDPOINT",
      "CACHE_TTL",
      "ENABLE_CACHE",
      "OUTPUT_SCHEMA_MAX_SIZE",
      "OUTPUT_SCHEMA_MAX_DEPTH",
      "OUTPUT_SCHEMA_PARSE_TIMEOUT"
    ],
    "infrastructure_constraints": [
      "Persistent SSE connections required",
      "Accessibility permissions on macOS",
      "DISPLAY variable on Linux",
      "Memory limit for buffers and event streaming",
      "Support for Windows, Linux, macOS",
      "Server must be accessible on configured port",
      "Environment variables must be set correctly",
      "Docker and Kubernetes support for containerization",
      "API keys must be managed securely",
      "Local NutJS API must be running for automation"
    ]
  },
  "lastCommitHash": "9842af32199ca7ae180e0b95d61670e444fd2950"
}

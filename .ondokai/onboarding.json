{
  "project_metadata": {
    "name": "NutJS Desktop Automation API â€“ Web/Mobile/Desktop automation, input event capture, LLM and OCR integration",
    "domain": [
      "Web/Mobile/Desktop Automation",
      "Input Event Capture and Processing",
      "AI Integration (LLM, OCR, NLP)",
      "Backend API",
      "Frontend Web Application",
      "Clipboard Management",
      "Screen Capture and Computer Vision",
      "Keyboard and Mouse Control",
      "Robotic Process Automation (RPA)",
      "Software Testing and Automation",
      "API Authentication and Security",
      "Data Validation and Error Handling"
    ],
    "current_phase": [
      "Development",
      "Production",
      "Maintenance",
      "Stable Configuration",
      "Testing and Validation",
      "MVP"
    ],
    "critical_business_rules": [
      "API keys must be kept secret and required for all sensitive endpoints",
      "Strict input validation for all parameters to prevent invalid commands",
      "Clipboard content must not exceed 1 MB and must be sanitized",
      "Key combinations must use only allowed modifiers and letters, with a maximum of 5 keys",
      "Timing values must be non-negative integers and not exceed 300000ms",
      "Mouse and screen coordinates must be within valid screen bounds",
      "All operations must return standardized responses with proper HTTP status codes",
      "Consistent error response format with no sensitive details in production",
      "Event buffer size, heartbeat, and rate must respect configured limits",
      "Singleton services must be unique and globally accessible",
      "Environment variables must be loaded safely and set for each environment",
      "Test coverage must be at least 80% for critical modules",
      "Output images must be valid base64 PNG and not exceed 1MB",
      "LLM requests must conform to defined schemas and respect token/temperature limits",
      "Batch OCR requests limited to 10 images, each under 14MB encoded",
      "Graceful shutdown to avoid data loss and resource leaks",
      "Consistent logging for audit and debugging, with log level reflecting environment",
      "Strict JSON Schema validation for all API requests and responses",
      "No additional properties allowed in requests",
      "Proper authentication required for streaming and sensitive operations"
    ]
  },
  "technical_stack": {
    "primary_language": [
      "TypeScript",
      "JavaScript (ES2020+)",
      "Node.js >=18",
      "React 18",
      "HTML5",
      "CSS3"
    ],
    "frameworks": [
      "Fastify 4.x",
      "React 18.x",
      "Jest 29.x",
      "Webpack 5.x",
      "TSyringe",
      "Zod 3.x",
      "NutJS",
      "LangChain",
      "React-Bootstrap 2.x",
      "React Router DOM 6.x",
      "Sharp 0.32.x",
      "tesseract.js 4.x"
    ],
    "databases": [
      "None (stateless, uses localStorage for frontend state)",
      "PostgreSQL 15",
      "Redis 7.0"
    ],
    "external_services": [
      "OpenAI API",
      "DeepSeek API",
      "NutJS",
      "Tesseract.js (OCR)",
      "clipboardy",
      "sharp",
      "nanoid",
      "LangChain LLM API",
      "Server-Sent Events (SSE)",
      "Environment variables (dotenv)",
      "Custom logger (pino)",
      "Local HTTP API (http://localhost:3000)",
      "React environment variables",
      "CDN Bootstrap",
      "CDN Font Awesome"
    ],
    "package_manager": ["npm", "yarn"]
  },
  "architecture_patterns": {
    "design_pattern": [
      "Clean Architecture",
      "Dependency Injection",
      "Modular Architecture",
      "RESTful API",
      "Event-driven (SSE for streaming)",
      "Singleton",
      "Adapter Pattern",
      "Factory Pattern",
      "DTO Pattern",
      "Service Layer",
      "Schema Validation",
      "Observer Pattern",
      "Component-Based Architecture (frontend)",
      "SPA (Single Page Application)",
      "Plugin Architecture",
      "Worker Pool",
      "LRU Cache"
    ],
    "folder_structure": [
      "src/ (backend source code)",
      "web/ (frontend React app)",
      "dist/ (build output)",
      "node_modules/ (dependencies)",
      "tests/ (unit and integration tests)",
      "config/ (configuration and logger)",
      "domain/ (entities and interfaces)",
      "application/services (business logic)",
      "infrastructure/adapters (external integrations)",
      "interface/controllers (API controllers)",
      "dto/ (Data Transfer Objects and validation schemas)",
      "schemas/ (JSON Schema and Zod validation)",
      "public/ (static assets)",
      "src/components/ (React UI components)",
      "src/types/ (TypeScript types and enums)",
      "src/hooks/ (custom React hooks)",
      "src/styles/ (CSS/SCSS files)"
    ],
    "naming_conventions": [
      "PascalCase for classes, interfaces, and React components",
      "camelCase for variables, functions, and methods",
      "UPPER_SNAKE_CASE for environment variables and constants",
      "kebab-case for filenames and static assets",
      "DTOs with 'Request'/'Response' suffix",
      "Controllers with 'Controller' suffix",
      "Schemas with 'Schema' suffix",
      "Interfaces prefixed with 'I'",
      "Test files with .test.ts or .test.tsx suffix"
    ],
    "module_boundaries": [
      "Clear separation between backend and frontend",
      "Domain does not depend on Application or Infrastructure",
      "Application depends on Domain",
      "Infrastructure depends on Application",
      "Interface depends on Application and Infrastructure",
      "Controllers expose routes and delegate to services",
      "Services encapsulate business logic and integrations",
      "DTOs and schemas isolate validation and typing",
      "Types and enums centralized in types/ and domain/enums",
      "Config, logger, and environment isolated in config/",
      "Mocks and tests isolated in tests/",
      "Frontend components, hooks, and types separated by folder"
    ]
  },
  "code_standards": {
    "style_guide": [
      "Airbnb JavaScript/TypeScript Style Guide",
      "ESLint Recommended",
      "Prettier",
      "TypeScript ESLint Recommended"
    ],
    "linting_rules": [
      "ESLint with @typescript-eslint plugin",
      "no-explicit-any: error",
      "no-unused-vars: error (ignore args starting with '_')",
      "strict typing enforced",
      "no-async-promise-executor: error",
      "no-await-in-loop: warn",
      "plugin:react/recommended",
      "plugin:react-hooks/recommended"
    ],
    "formatting": [
      "Prettier with default config",
      "semi: true",
      "singleQuote: true",
      "trailingComma: all",
      "printWidth: 100",
      "tabWidth: 2",
      "Integration with ESLint for consistent formatting"
    ],
    "documentation_style": [
      "JSDoc for all public methods, classes, and interfaces",
      "JSDoc for schemas and DTOs",
      "Inline comments in Portuguese for context"
    ],
    "type_checking": [
      "Strict TypeScript (strict mode enabled)",
      "Explicit types for parameters and returns",
      "Zod for runtime validation",
      "StrictNullChecks",
      "noImplicitAny"
    ]
  },
  "testing_strategy": {
    "test_framework": ["Jest 29.x", "React Testing Library", "ts-jest"],
    "test_structure": [
      "tests/unit/ for unit tests",
      "tests/integration/ for integration tests",
      "tests/components/ for React component tests",
      "__tests__ folders alongside source files",
      "Mocks for external dependencies"
    ],
    "coverage_requirements": [
      "Minimum 80% coverage on statements, branches, functions, and lines",
      ">= 90% coverage for validation schemas and DTOs",
      ">= 80% coverage for critical modules"
    ],
    "test_patterns": [
      "AAA (Arrange-Act-Assert)",
      "Given-When-Then",
      "Mocks for external dependencies",
      "Snapshot testing for UI",
      "Parameterized tests for multiple cases"
    ],
    "mocking_approach": [
      "Jest mocks and spies",
      "jest.mock for external modules",
      "Mocks for clipboardy, nanoid, logger, and NutJS",
      "Mocking Fastify request and reply",
      "Mocking React hooks and API calls"
    ]
  },
  "development_workflow": {
    "branch_strategy": ["GitHub Flow", "git Flow"],
    "commit_conventions": ["Conventional Commits"],
    "pr_requirements": [
      "Code review mandatory",
      "Passing CI checks",
      "Automated lint and test checks",
      "At least one reviewer approval"
    ],
    "ci_cd_pipeline": [
      "Build, lint, test, and deploy automated via GitHub Actions",
      "Unit tests with coverage",
      "Linting",
      "Deploy to staging and production"
    ]
  },
  "commands": {
    "setup": ["npm install", "cp .env.example .env"],
    "install": ["npm ci"],
    "dev": [
      "npm run dev",
      "npm run dev:web",
      "npm run dev:full",
      "webpack serve --config webpack.config.js"
    ],
    "test": ["npm test", "npm run test:unit", "npm run test:integration", "npm run test:coverage"],
    "build": [
      "npm run build",
      "npm run build:web",
      "npm run build:prod",
      "tsc --build",
      "webpack --config webpack.config.js"
    ],
    "lint": ["npm run lint", "eslint . --ext .ts", "npm run lint:fix"],
    "format": ["npm run format", "prettier --write .", "npm run format:check"]
  },
  "security_constraints": {
    "authentication_method": [
      "API Key via HTTP header 'x-api-key'",
      "JWT (for external services)",
      "API Keys for OpenAI and DeepSeek"
    ],
    "authorization_rules": [
      "Role-based Access Control (RBAC)",
      "Access restricted to users with valid API key",
      "401/403 errors for unauthorized access",
      "macOS Accessibility permissions required for input capture",
      "No access to /status endpoint required"
    ],
    "sensitive_data": [
      "API Keys for OpenAI and DeepSeek",
      "Clipboard content (must be sanitized and limited)",
      "User input event data (mouse, keyboard)",
      "Base64 image data (must be validated and not stored)",
      "Environment variables (must not expose sensitive data)",
      "Prompt and LLM responses (must be handled confidentially)",
      "Tokens and credentials (must be stored in environment variables)"
    ],
    "security_headers": [
      "Content-Security-Policy",
      "X-Frame-Options",
      "Strict-Transport-Security",
      "Content-type: application/json",
      "x-api-key header required",
      "Cache-Control: no-cache",
      "CORS"
    ],
    "encryption_requirements": [
      "TLS for all network communication",
      "HTTPS required for API and external services",
      "Hashing for sensitive data (e.g., bcrypt for passwords)",
      "No sensitive data stored in logs or localStorage"
    ]
  },
  "performance_requirements": {
    "response_time_limits": [
      "API responses < 200ms for standard operations",
      "Screen capture and OCR responses < 5000ms",
      "Real-time event capture with minimal latency",
      "LLM completions ideally < 1s",
      "Timeouts for OCR and LLM processing between 1000ms and 300000ms",
      "Status checks < 2s"
    ],
    "optimization_priorities": [
      "Low latency for input and automation operations",
      "Efficient memory usage for event buffers and image processing",
      "Fast build and test cycles",
      "Validation efficiency to minimize request overhead",
      "Performance optimized for production",
      "Responsiveness and smooth UI interactions",
      "Batch processing and parallelism for OCR"
    ],
    "caching_strategy": [
      "Redis cache with configurable TTL for static data",
      "In-memory buffer for recent events",
      "LocalStorage cache for frontend status (TTL 60s)",
      "LRU cache for OCR results",
      "Static asset caching via Webpack contenthash",
      "No dynamic cache for input events"
    ],
    "scalability_considerations": [
      "Horizontally scalable via Fastify and Node.js cluster",
      "Support for multiple concurrent requests and SSE clients",
      "Batch size and worker pool configurable for OCR",
      "Modular architecture for horizontal scaling",
      "Singletons for global services, but can scale horizontally",
      "Frontend and backend can be deployed independently"
    ]
  },
  "error_handling": {
    "error_format": [
      "Standard JSON with fields: success, error, code, details",
      "Zod validation error format for schema validation",
      "CommandResult with success:boolean, data?:object, error?:string",
      "Proper HTTP status codes for all errors",
      "No sensitive details in production error responses"
    ],
    "logging_strategy": [
      "Structured logging with pino (levels: info, warn, error, debug)",
      "Log level configurable via LOG_LEVEL environment variable",
      "Logs separated for errors and standard output",
      "Human-readable logs in development, performant logs in production",
      "Sensitive data masked in logs"
    ],
    "monitoring_tools": [
      "Sentry for production error monitoring",
      "PM2 internal monitoring",
      "Prometheus/Grafana (optional integration)",
      "Custom logger with possible external integration"
    ],
    "error_recovery": [
      "Automatic retries for transient failures",
      "Graceful shutdown to avoid data loss",
      "Strict input validation to prevent invalid states",
      "Fallbacks for parsing and LLM errors",
      "Batch processing with error reporting per item",
      "Timeouts and aborts handled gracefully with specific error codes"
    ]
  },
  "dependencies_context": {
    "critical_dependencies": [
      "OpenAI API",
      "DeepSeek API",
      "TypeScript",
      "Fastify",
      "React",
      "Jest",
      "Webpack",
      "TSyringe",
      "Zod",
      "NutJS",
      "clipboardy",
      "sharp",
      "tesseract.js",
      "nanoid",
      "LangChain",
      "pino"
    ],
    "deprecated_packages": ["robotjs (deprecated, replaced by NutJS)"],
    "version_constraints": [
      "Node.js >=18",
      "TypeScript >=5.0",
      "Fastify 4.x",
      "React 18.x",
      "Zod 3.x",
      "Jest 29.x",
      "Sharp 0.32.x",
      "tesseract.js 4.x",
      "clipboardy >=3.0.0",
      "tsyringe 4.x",
      "dotenv >=16.0.0",
      "JSON Schema Draft 7 compliance"
    ],
    "internal_packages": [
      "@nut-tree-fork/nut-js",
      "domain/interfaces",
      "domain/entities",
      "application/services",
      "infrastructure/adapters",
      "interface/controllers",
      "dto",
      "types",
      "config",
      "schemas"
    ]
  },
  "current_challenges": {
    "technical_debt": [
      "Refactoring legacy JavaScript modules to TypeScript",
      "Improve error handling and logging granularity",
      "Expand test coverage for edge cases (clipboard, input events)",
      "Enhance environment variable validation",
      "Improve documentation for dependency container and routes",
      "Authentication and authorization logic to be further hardened",
      "Monitor and alert integration pending",
      "Optimize worker recycling and OCR error handling",
      "Expand support for additional image formats and languages"
    ],
    "known_issues": [
      "Inconsistencies in local development environments",
      "macOS Accessibility permissions may block event capture",
      "Possible event loss in full event buffer",
      "Rate limiting may drop events during spikes",
      "Large base64 images may impact memory usage",
      "Dependency on local API availability",
      "Timeouts may cause failures on complex images",
      "Possible exposure of API key in frontend if not handled properly"
    ],
    "performance_bottlenecks": [
      "Image processing and OCR can be resource-intensive",
      "Sequential typing with per-character delay may be slow for long texts",
      "Streaming SSE may generate overhead with many clients",
      "Parsing and validation of large schemas may impact latency",
      "OCR processing time varies with image complexity and mode"
    ],
    "migration_status": [
      "Migration to TypeScript completed",
      "Fastify 4.x and TypeScript 5.x in use",
      "Ongoing improvements and refactoring planned",
      "Stable in production"
    ]
  },
  "team_preferences": {
    "code_review_focus": [
      "Test coverage",
      "Code quality and linting",
      "TypeScript type safety",
      "Security and input validation",
      "Consistent error handling and logging",
      "Separation of concerns and modularity",
      "Documentation clarity",
      "Performance and responsiveness"
    ],
    "documentation_requirements": [
      "Clear documentation via JSDoc for all public methods and interfaces",
      "README and API documentation with usage examples",
      "JSDoc for schemas, DTOs, and endpoints",
      "Inline comments in Portuguese for context"
    ],
    "communication_style": [
      "Objective and technical comments",
      "Portuguese for context, English for technical terms",
      "Clear and concise PRs",
      "Use of Markdown for technical discussions",
      "Emphasis on collective learning"
    ],
    "decision_log": [
      "Adoption of Clean Architecture and modular separation",
      "Use of Fastify for high performance",
      "TypeScript and Zod for strict typing and validation",
      "API key authentication for sensitive endpoints",
      "Singleton pattern for shared services",
      "Event-driven pattern for input capture",
      "React 18 and React-Bootstrap for frontend",
      "Webpack for build and static asset management",
      "LRU cache for OCR results",
      "GitHub Actions for CI/CD",
      "Conventional Commits for commit messages",
      "Jest and React Testing Library for testing",
      "Structured logging with pino",
      "Environment variables managed via dotenv",
      "Batch processing and worker pool for OCR",
      "Strict error handling and standardized response formats"
    ]
  },
  "api_specifications": {
    "api_style": ["RESTful", "REST with SSE for streaming", "Internal event dispatching API"],
    "versioning_strategy": [
      "URI versioning (e.g., /api/v1)",
      "Version in URL (/api/v1/llm, /api/v1/screen)",
      "Versioning via package.json for internal modules"
    ],
    "response_formats": [
      "application/json",
      "Standard JSON with fields: success, data, error",
      "Base64 encoded PNG images",
      "text/event-stream for SSE",
      "Zod validation error format"
    ],
    "rate_limiting": [
      "Configurable via environment variable (default 5000 events/sec)",
      "1000 requests per minute per IP (recommended)",
      "Batch OCR requests limited to 10 images",
      "No rate limiting on /status endpoint"
    ]
  },
  "deployment_context": {
    "environments": [
      "development (http://localhost:3000)",
      "staging (http://staging.example.com)",
      "production (http://example.com)",
      "test"
    ],
    "deployment_method": [
      "Docker container",
      "PM2 process manager",
      "CI/CD pipeline via GitHub Actions",
      "Node.js runtime",
      "Webpack for frontend bundling",
      "Static hosting for frontend"
    ],
    "environment_variables": [
      "NODE_ENV",
      "PORT",
      "LOG_LEVEL",
      "API_KEY",
      "OPENAI_API_KEY",
      "DEEPSEEK_API_KEY",
      "INPUT_EVENT_BUFFER",
      "INPUT_EVENT_RATE",
      "KEYBOARD_DEFAULT_MODE",
      "KEYBOARD_MAX_TEXT_LENGTH",
      "MOUSE_SPEED",
      "SCREEN_CONFIDENCE",
      "OCR_WORKER_COUNT",
      "OCR_MAX_IMAGE_SIZE_MB",
      "OCR_TIMEOUT_MS",
      "CACHE_TTL",
      "REACT_APP_API_URL"
    ],
    "infrastructure_constraints": [
      "Memory and CPU limits for Docker/Kubernetes pods",
      "macOS Accessibility permissions required for input capture",
      "Firewall rules for API access",
      "Support for Windows, Linux, and macOS",
      "Environment variables must be configured correctly",
      "Local API must be running for full functionality",
      "Batch size and image size limits for OCR",
      "Persistent SSE connections require proper server configuration",
      "LocalStorage limits for frontend state",
      "Node.js >=18 required"
    ]
  },
  "lastCommitHash": "f6bb70497de545cba2c3dc6f76595ad0f0aaa1d9"
}

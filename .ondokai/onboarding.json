{
  "project_metadata": {
    "name": "NutJS Desktop Automation API â€“ RESTful Web/Desktop Automation with LLM Integration",
    "domain": [
      "Web/Mobile/Desktop Automation",
      "Backend API",
      "AI Integration",
      "Desktop Input Event Capture",
      "Clipboard Management",
      "Screen Capture",
      "Keyboard and Mouse Control",
      "UI Automation",
      "Test Automation",
      "Data Validation",
      "Security",
      "Logging",
      "Software Development",
      "Natural Language Processing",
      "Large Language Models",
      "Machine Learning",
      "Frontend Web Development",
      "UI/UX Design"
    ],
    "current_phase": [
      "Development",
      "Production",
      "Maintenance",
      "Stable",
      "Testing Automation",
      "MVP",
      "Debugging",
      "Testing and Validation",
      "Stable Configuration"
    ],
    "critical_business_rules": [
      "API key authentication required for all sensitive endpoints",
      "Strict input validation using JSON Schema/Zod",
      "Clipboard content must not exceed 1 MB",
      "Text input must be non-empty and free of control characters",
      "Key combinations must use only allowed modifiers and letters (1-5 keys)",
      "Timing values must be non-negative integers and not exceed 300000ms",
      "Mouse and screen coordinates must be within valid screen bounds",
      "Consistent error response format with proper HTTP status codes",
      "No leakage of sensitive error details in production",
      "Logs must record failures for audit",
      "Continuous API availability",
      "Rate limiting to prevent overload (configurable via environment)",
      "Buffer size, heartbeat, and event age must be within defined limits",
      "Production logs must be performant and minimal; development logs must be human-readable",
      "Coverage minimum 80% for tests",
      "No use of explicit 'any' in TypeScript",
      "Environment variables must be defined and not exposed in code",
      "LLM requests must respect token and temperature limits",
      "Output must conform to defined schemas",
      "Graceful error handling and no resource leaks on shutdown",
      "Singleton pattern for event dispatcher and buffer",
      "Consistent clipboard state and reliable input simulation",
      "Support only mapped keys for keyboard automation",
      "No emission of test files in production build",
      "Consistent navigation and accessibility in frontend",
      "Responsiveness across devices and browsers",
      "No additional properties allowed in requests",
      "Strict type checking and separation between src and dist",
      "No source maps in production",
      "API must return valid base64 image data for screen capture",
      "Proper logging for usage and errors",
      "No prototype pollution or schema recursion",
      "Consistent success and error responses",
      "No loss of recent events in buffer",
      "Real-time event delivery via SSE",
      "Valid API key required for streaming endpoints",
      "No side effects on target system",
      "Consistent and ordered event delivery"
    ]
  },
  "technical_stack": {
    "primary_language": ["TypeScript", "Node.js >=18", "JavaScript (ES2020+)", "HTML5", "CSS3"],
    "frameworks": [
      "Fastify 4.x",
      "React 18.x",
      "NutJS",
      "TSyringe",
      "Zod",
      "Webpack 5",
      "Jest 29.x",
      "React-Bootstrap 2.x",
      "Bootstrap 5.3.2",
      "pino 8.x",
      "dotenv 16.x",
      "uiohook-napi"
    ],
    "databases": ["None", "PostgreSQL 15", "Redis 7.0"],
    "external_services": [
      "OpenAI API",
      "DeepSeek API",
      "LangChain LLM API",
      "clipboardy",
      "sharp",
      "nanoid",
      "@nut-tree-fork/nut-js",
      "Server-Sent Events (SSE)",
      "Environment variables",
      "Logger service (custom)",
      "LLMAdapter",
      "Dependency Injection container",
      "uiohook-napi"
    ],
    "package_manager": ["npm", "yarn"]
  },
  "architecture_patterns": {
    "design_pattern": [
      "Clean Architecture",
      "Dependency Injection",
      "Modular Architecture",
      "RESTful API",
      "Event-driven (SSE for streaming)",
      "Singleton",
      "Adapter Pattern",
      "Factory Pattern",
      "Schema Validation",
      "Service Layer",
      "Observer Pattern",
      "Controller-Service Pattern",
      "DTO Pattern",
      "Plugin-based Architecture",
      "Separation of Concerns",
      "Component-Based Architecture (frontend)",
      "Responsive Web Design"
    ],
    "folder_structure": [
      "src/ - main TypeScript source code",
      "dist/ - compiled output",
      "web/ - React frontend",
      "tests/ - unit and integration tests",
      "config/ - environment and logger configuration",
      "domain/ - entities, enums, interfaces",
      "application/services - business logic and DTOs",
      "infrastructure/adapters - external integrations",
      "interface/controllers - API controllers and middleware",
      "schemas/ - validation schemas",
      "types/ - shared types and interfaces",
      "assets/ - static files and styles",
      "node_modules/ - dependencies",
      "coverage/ - test coverage reports",
      "logs/ - log files"
    ],
    "naming_conventions": [
      "UPPER_SNAKE_CASE for environment variables",
      "camelCase for variables and functions",
      "PascalCase for classes, interfaces, and React components",
      "kebab-case for files and routes",
      "CamelCase for types and schemas",
      "Suffix 'Service' for service classes",
      "Prefix 'I' for interfaces",
      "DTOs with 'Request' suffix",
      "Controllers with 'Controller' suffix",
      "Test files with .test.ts or .test.tsx"
    ],
    "module_boundaries": [
      "Clear separation between backend (API) and frontend (React)",
      "Domain does not depend on Application or Infrastructure",
      "Application depends on Domain",
      "Infrastructure depends on Application",
      "Interface depends on Application and Infrastructure",
      "Controllers expose routes and delegate to services",
      "Services encapsulate business logic and hardware/system interactions",
      "DTOs and schemas isolate validation and typing",
      "Validation separated from business logic",
      "Dependency injection for decoupling",
      "Mocks isolated in tests",
      "Config, DTO, and parsing separated",
      "Streaming separated in its own module",
      "Types shared via types/ folder",
      "No circular dependencies"
    ]
  },
  "code_standards": {
    "style_guide": [
      "Airbnb JavaScript/TypeScript Style Guide",
      "ESLint Recommended",
      "Prettier",
      "TypeScript ESLint Recommended",
      "CSS Standard Practices"
    ],
    "linting_rules": [
      "ESLint with @typescript-eslint plugin",
      "@typescript-eslint/no-explicit-any: error",
      "@typescript-eslint/no-unused-vars: error with argsIgnorePattern '^_'",
      "@typescript-eslint/no-floating-promises: error",
      "@typescript-eslint/await-thenable: error",
      "eslint-config-prettier",
      "eslint-plugin-prettier",
      "no-async-promise-executor: error",
      "no-await-in-loop: warn",
      "strict typing"
    ],
    "formatting": [
      "Prettier with default configuration",
      "prettier --write .",
      "semi: true",
      "singleQuote: true",
      "trailingComma: all",
      "printWidth: 100",
      "tabWidth: 2",
      "Integration with ESLint for consistent formatting",
      "Indentation: 2 spaces"
    ],
    "documentation_style": [
      "JSDoc for functions, classes, and interfaces",
      "JSDoc for public methods",
      "Inline comments in Portuguese for context",
      "JSDoc for schemas and DTOs"
    ],
    "type_checking": [
      "TypeScript strict mode enabled",
      "StrictNullChecks",
      "NoImplicitAny",
      "Explicit types for parameters and returns",
      "Zod for runtime validation",
      "Strict TypeScript settings via tsconfig.json"
    ]
  },
  "testing_strategy": {
    "test_framework": [
      "Jest 29.x",
      "ts-jest",
      "React Testing Library",
      "Postman Tests (JavaScript)"
    ],
    "test_structure": [
      "tests/ for unit and integration tests",
      "__tests__ folders colocated with modules",
      "tests/unit for unit tests",
      "tests/integration for integration tests",
      "Test files with .test.ts or .test.tsx suffix",
      "Mocks for external dependencies"
    ],
    "coverage_requirements": [
      "Minimum 80% coverage",
      "branches >= 80%",
      "functions >= 80%",
      "lines >= 80%",
      "statements >= 80%",
      "Coverage monitored via jest --coverage"
    ],
    "test_patterns": [
      "AAA (Arrange, Act, Assert)",
      "Given-When-Then",
      "Mocking of external dependencies",
      "Parameterized tests for multiple cases",
      "Direct API call and response validation"
    ],
    "mocking_approach": [
      "Mocks and spies via Jest",
      "jest.mock for external modules",
      "Mocks for clipboardy, pino, nanoid, and uiohook-napi",
      "Mocks for FastifyRequest and FastifyReply",
      "Mocks for LLMAdapter and external APIs",
      "Mocks for services and adapters via DI container",
      "Isolation of side effects in tests"
    ]
  },
  "development_workflow": {
    "branch_strategy": ["GitHub Flow", "git Flow"],
    "commit_conventions": ["Conventional Commits"],
    "pr_requirements": [
      "Code review mandatory",
      "Passing CI checks",
      "Lint and test checks",
      "Automated tests passing",
      "At least one reviewer approval"
    ],
    "ci_cd_pipeline": [
      "Build, lint, test, and deploy automated via GitHub Actions",
      "Unit tests",
      "Linting",
      "Deploy automatic to staging/production"
    ]
  },
  "commands": {
    "setup": [
      "npm install",
      "cp .env.example .env",
      "npm install && npm run build",
      "npm install uiohook-napi"
    ],
    "install": ["npm install", "npm ci"],
    "dev": ["npm run dev", "npm start", "tsc --watch", "webpack serve --config webpack.config.js"],
    "test": ["npm test", "npm run test", "npm test -- --coverage"],
    "build": ["npm run build", "tsc", "webpack --config webpack.config.js"],
    "lint": ["npm run lint", "eslint . --ext .ts,.tsx"],
    "format": ["npm run format", "prettier --write ."]
  },
  "security_constraints": {
    "authentication_method": [
      "API key via HTTP header 'x-api-key'",
      "JWT (for external integrations)",
      "API keys for external services"
    ],
    "authorization_rules": [
      "Role-based Access Control (RBAC)",
      "Access restricted to users with valid API key",
      "Access control via Fastify middleware",
      "API key must be valid and authorized for endpoint access",
      "macOS Accessibility permissions required for event capture"
    ],
    "sensitive_data": [
      "API keys for OpenAI and DeepSeek",
      "JWT tokens",
      "Clipboard content",
      "Environment variables for configuration",
      "User input data (keyboard, mouse, clipboard)",
      "Base64 image data",
      "Prompt and LLM responses",
      "No sensitive data exposed in logs"
    ],
    "security_headers": [
      "Content-Security-Policy",
      "X-Frame-Options",
      "Strict-Transport-Security",
      "Content-type: application/json",
      "x-api-key required in header",
      "Cache-Control: no-cache",
      "Connection: keep-alive"
    ],
    "encryption_requirements": [
      "TLS for all communications",
      "HTTPS required for external API calls",
      "Environment variables must not expose sensitive data",
      "No sensitive data stored unencrypted"
    ]
  },
  "performance_requirements": {
    "response_time_limits": [
      "API responses < 200ms for standard operations",
      "Screen capture and recognition < 5000ms",
      "Low latency for automation and REST API",
      "Real-time event streaming with minimal latency",
      "Immediate response for authentication (< 100ms)",
      "Configurable delay for typing and mouse actions (max 300000ms)",
      "Production interface loads in < 2 seconds"
    ],
    "optimization_priorities": [
      "Response speed prioritized over memory usage",
      "Efficient event and image handling",
      "Validation efficiency to minimize request overhead",
      "Low latency and high availability",
      "Efficient logging",
      "Minimize build and test times",
      "Balance between speed and accuracy for recognition",
      "Efficient use of singletons for shared state",
      "Performance optimized in production"
    ],
    "caching_strategy": [
      "Redis cache with configurable TTL for static data",
      "Circular buffer as cache for recent events",
      "Configuration loaded once at startup",
      "No cache for dynamic input operations",
      "Cache of compiled schemas with TTL"
    ],
    "scalability_considerations": [
      "Horizontally scalable via containers",
      "Support for multiple concurrent requests",
      "SSE streaming for real-time data",
      "Singletons limit per-process scaling, but horizontal scaling supported",
      "Batch size configurable for scalability",
      "Support for multiple LLM providers and models",
      "Modular architecture for horizontal scalability",
      "Support for multiple SSE clients",
      "Stateless handlers for scalability"
    ]
  },
  "error_handling": {
    "error_format": [
      "Standard JSON with fields: success, error, code, details",
      "Zod validation error format",
      "CommandResult with success, data, and error",
      "Consistent error response with HTTP status codes",
      "Logs structured via logger"
    ],
    "logging_strategy": [
      "Structured logging with pino",
      "Log level configurable via LOG_LEVEL",
      "Separate logs for errors and info",
      "Human-readable logs in development",
      "Sensitive data masked in logs",
      "Logs for audit and debugging"
    ],
    "monitoring_tools": [
      "Sentry for production error monitoring",
      "PM2 internal monitoring",
      "Health check endpoint",
      "Integration with external systems (ELK, Datadog) possible"
    ],
    "error_recovery": [
      "Automatic retries for transient failures",
      "Graceful shutdown to avoid resource leaks",
      "Fail-fast on invalid configuration",
      "Fallbacks for parsing and LLM errors",
      "Validation prevents invalid states",
      "Centralized error handling middleware",
      "Retry on streaming and critical route failures",
      "Consistent error responses for client-side handling"
    ]
  },
  "dependencies_context": {
    "critical_dependencies": [
      "OpenAI API",
      "DeepSeek API",
      "TypeScript",
      "Fastify",
      "React",
      "Jest",
      "NutJS",
      "TSyringe",
      "Zod",
      "Webpack",
      "pino",
      "dotenv",
      "clipboardy",
      "nanoid",
      "uiohook-napi",
      "LangChain LLM Adapter",
      "sharp"
    ],
    "deprecated_packages": ["robotjs"],
    "version_constraints": [
      "Node.js >=18",
      "TypeScript >=5.0",
      "Fastify 4.x",
      "React 18.x",
      "Zod >=3.x",
      "tsyringe >=4.0.0",
      "clipboardy >=3.0.0",
      "dotenv >=16.0.0",
      "Jest >=29",
      "uiohook-napi compatible with Node.js 18+",
      "Bootstrap 5.3.2",
      "Font Awesome 6.4.0"
    ],
    "internal_packages": [
      "@nut-tree-fork/* (nut-js ecosystem)",
      "domain/interfaces",
      "domain/entities",
      "application/services",
      "infrastructure/adapters",
      "interface/controllers",
      "config",
      "types",
      "schemas",
      "dto"
    ]
  },
  "current_challenges": {
    "technical_debt": [
      "Refactoring legacy JavaScript modules to TypeScript",
      "Improve test coverage for edge cases (clipboard, streaming)",
      "Enhance error handling granularity",
      "Validation of environment variables could be more robust",
      "Documentation needs to be more detailed",
      "Authentication and authorization not fully implemented in all modules",
      "Fallback and error handling in complex parsing could be improved",
      "Maintain compatibility with legacy and dynamic output formats",
      "Improve async error handling in service shutdown",
      "Expand key mapping coverage for keyboard automation"
    ],
    "known_issues": [
      "Inconsistencies in local development environments",
      "Limitations handling large text volumes for typing",
      "macOS Accessibility permissions may block event capture",
      "Possible event loss in full buffer scenarios",
      "Rate limiting may drop events during spikes",
      "Dependency on external API availability",
      "Potential resource leaks if SSE connections not closed properly",
      "Possible silent failure if environment variables are misconfigured",
      "Performance impact for long texts with high delays",
      "Possible lack of authentication on some routes",
      "Potential platform compatibility issues with uiohook-napi",
      "Possible excessive logging in development",
      "Frontend: possible slowdowns on old devices due to CSS effects"
    ],
    "performance_bottlenecks": [
      "Type-checking analysis may impact lint performance",
      "Image capture and recognition operations can be costly",
      "Sequential await in typing may cause slowness",
      "Logging overhead in production if misconfigured",
      "Buffer may grow indefinitely without pruning",
      "Parsing and validation of large schemas may impact performance",
      "Potential event flooding mitigated by selective logging",
      "Synchronous processing may impact high-load scenarios"
    ],
    "migration_status": [
      "Migration to TypeScript completed",
      "Stable, no active migrations",
      "Gradual migration from legacy to dynamic output format ongoing",
      "Jest update in progress"
    ]
  },
  "team_preferences": {
    "code_review_focus": [
      "Test coverage",
      "Code quality",
      "Lint rule compliance",
      "Security and validation",
      "Consistent error handling",
      "Strict typing",
      "Separation of concerns",
      "Proper dependency injection",
      "Consistent logging",
      "Accessibility and responsiveness in frontend"
    ],
    "documentation_requirements": [
      "Clear documentation via JSDoc",
      "Document all public methods and interfaces",
      "Document environment variables and usage",
      "Inline comments in Portuguese for context",
      "Update know-how.txt after major changes"
    ],
    "communication_style": [
      "Objective and clear comments in Portuguese",
      "Technical terms in English for precision",
      "Objective PRs with detailed descriptions",
      "Use of emojis for log/status clarity",
      "Markdown for technical discussions"
    ],
    "decision_log": [
      "Adoption of Clean Architecture and Dependency Injection",
      "Use of Fastify for high performance",
      "Use of Zod for declarative validation",
      "API key for simple authentication",
      "Singleton for event dispatcher and buffer",
      "Use of circular buffer for event optimization",
      "Use of pino for structured logging",
      "Separation of backend (Fastify) and frontend (React)",
      "Use of tsyringe for DI",
      "Use of enums for LLM model integrity",
      "Use of SSE for real-time streaming",
      "Use of mocks for test isolation",
      "Strict async/await and explicit types",
      "Use of Bootstrap and Font Awesome via CDN for frontend"
    ]
  },
  "api_specifications": {
    "api_style": ["RESTful", "REST with SSE for streaming", "Internal event dispatching API"],
    "versioning_strategy": ["URI versioning (e.g., /api/v1)", "Prefix /api/v1 for versioning"],
    "response_formats": [
      "application/json",
      "Standard JSON with fields: success, data, error",
      "Base64 encoded images",
      "text/event-stream for SSE",
      "CommandResult with success, data, and error"
    ],
    "rate_limiting": [
      "Configurable via environment variable INPUT_EVENT_RATE",
      "Default 5000 events per second",
      "1000 requests per minute per IP (recommended for API endpoints)"
    ]
  },
  "deployment_context": {
    "environments": [
      "development",
      "staging",
      "production",
      "Localhost (http://localhost:3000)",
      "test"
    ],
    "deployment_method": [
      "PM2",
      "Docker container",
      "Kubernetes",
      "Node.js runtime",
      "Webpack for frontend",
      "CI/CD pipeline via GitHub Actions"
    ],
    "environment_variables": [
      "NODE_ENV",
      "PORT",
      "LOG_LEVEL",
      "API_KEY",
      "OPENAI_API_KEY",
      "DEEPSEEK_API_KEY",
      "INPUT_EVENT_BUFFER",
      "INPUT_EVENT_RATE",
      "INPUT_EVENT_HEARTBEAT",
      "INPUT_EVENT_MAX_AGE",
      "KEYBOARD_DEFAULT_MODE",
      "KEYBOARD_MAX_TEXT_LENGTH",
      "KEYBOARD_DEFAULT_DELAY_PER_CHAR",
      "KEYBOARD_MAX_DELAY",
      "KEYBOARD_BATCH_SIZE",
      "MOUSE_MIN_DUR",
      "MOUSE_MAX_DUR",
      "MOUSE_DEFAULT_SMOOTH",
      "MOUSE_SAMPLE_RATE",
      "MOUSE_STREAM_INTERVAL",
      "LLM_SERVICE_ENDPOINT",
      "CACHE_TTL",
      "ENABLE_CACHE",
      "OUTPUT_SCHEMA_MAX_SIZE",
      "OUTPUT_SCHEMA_MAX_DEPTH",
      "OUTPUT_SCHEMA_PARSE_TIMEOUT"
    ],
    "infrastructure_constraints": [
      "Memory limits in Kubernetes pods",
      "Firewall rules",
      "macOS Accessibility permissions",
      "DISPLAY variable on Linux",
      "Single instance per process for event capture",
      "Access to hardware for mouse/keyboard/clipboard",
      "Persistent SSE connections require memory management",
      "Node.js 18+ required",
      "Proper environment variable configuration",
      "Bandwidth limits for static assets",
      "Requires OS support for global input hooks"
    ]
  },
  "lastCommitHash": "be9d0304b2fb6e15accf8c3620fac408d4c5669b"
}

{
  "version": "1.0.0",
  "created": "2025-08-27T00:54:39.721Z",
  "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a",
  "structure": {
    ".env": {
      "summary": "Arquivo de configuração de variáveis de ambiente local contendo configurações do servidor Node.js (porta, host, log level), parâmetros de automação (velocidade do mouse, confiança de tela), chaves de API para autenticação e integrações com OpenAI e DeepSeek, além de configurações do gravador de ações com suporte a screenshots.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    ".env.example": {
      "summary": "Template de exemplo do arquivo de variáveis de ambiente com placeholders para configurações do servidor, chaves de API e parâmetros de automação. Serve como guia para configuração inicial do projeto, indicando todas as variáveis necessárias sem expor valores sensíveis.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    ".eslintignore": {
      "summary": "Arquivo de configuração do ESLint que define diretórios e arquivos a serem ignorados durante a análise de lint, incluindo node_modules, dist, coverage, logs, arquivos de configuração, documentação Markdown e o diretório web.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    ".eslintrc.cjs": {
      "summary": "Configuração do ESLint em CommonJS para projeto TypeScript, usando parser TypeScript, regras recomendadas e type-checking rigoroso. Define regras para promises assíncronas, floating promises, uso de any e variáveis não utilizadas, com override específico para arquivos de teste.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    ".gitignore": {
      "summary": "Arquivo de configuração Git que define diretórios e arquivos a serem ignorados no versionamento, incluindo node_modules, dist, logs, arquivos de ambiente (.env), coverage, IDEs (.vscode, .idea) e diretórios específicos do projeto ondokai (.prompts, .logs, .audios).",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    ".husky": {
      "_": {
        ".gitignore": {
          "summary": "Arquivo .gitignore do diretório interno do Husky que ignora todos os arquivos (*) dentro do diretório .husky/_, permitindo que o Husky gerencie seus próprios arquivos internos sem versionamento.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "applypatch-msg": {
          "summary": "Hook do Git para o Husky que é executado quando uma mensagem de patch é aplicada. Script shell mínimo que carrega o arquivo de configuração principal do Husky (h) para processar eventos de aplicação de patches.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "commit-msg": {
          "summary": "Hook do Git para o Husky executado para validar mensagens de commit. Script shell que carrega o arquivo de configuração principal do Husky (h) para processar e validar mensagens de commit antes de serem aceitas.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "h": {
          "summary": "Script principal de configuração do Husky que gerencia a execução de hooks do Git. Carrega configurações do usuário, gerencia PATH para node_modules, executa scripts de hook com tratamento de erros e códigos de saída, incluindo suporte para debug e verificação de comandos não encontrados.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "husky.sh": {
          "summary": "Script de aviso de depreciação do Husky que alerta sobre mudanças na v10.0.0. Instrui os usuários a remover linhas específicas de configuração antigas que falharão em versões futuras, auxiliando na migração para novas versões do Husky.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "post-applypatch": {
          "summary": "Hook do Git para o Husky executado após aplicação de patches. Script shell mínimo que carrega o arquivo de configuração principal do Husky (h) para processar eventos pós-aplicação de patches no repositório.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "post-checkout": {
          "summary": "Hook do Git para o Husky executado após operações de checkout. Script shell que carrega o arquivo de configuração principal do Husky (h) para processar eventos após mudanças de branch ou checkout de arquivos.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "post-commit": {
          "summary": "Hook do Git para o Husky executado após confirmação de commit. Script shell que carrega o arquivo de configuração principal do Husky (h) para executar ações automáticas após commits bem-sucedidos no repositório.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "post-merge": {
          "summary": "Hook do Git para o Husky executado após operações de merge. Script shell que carrega o arquivo de configuração principal do Husky (h) para processar eventos após mesclagens bem-sucedidas de branches.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "post-rewrite": {
          "summary": "Hook do Git para o Husky executado após reescrita de histórico. Script shell que carrega o arquivo de configuração principal do Husky (h) para processar eventos após operações de rebase ou amend de commits.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "pre-applypatch": {
          "summary": "Hook do Git para o Husky executado antes da aplicação de patches. Script shell que carrega o arquivo de configuração principal do Husky (h) para validar e processar patches antes de serem aplicados ao repositório.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "pre-auto-gc": {
          "summary": "Hook do Git para o Husky executado antes da coleta de lixo automática. Script shell que carrega o arquivo de configuração principal do Husky (h) para executar tarefas antes da limpeza automática de objetos Git não referenciados.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "pre-commit": {
          "summary": "Hook do Git para o Husky executado antes de confirmar commits. Script shell que carrega o arquivo de configuração principal do Husky (h) para executar validações, linting e testes antes de permitir commits no repositório.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "pre-merge-commit": {
          "summary": "Hook do Git para o Husky executado antes de commits de merge. Script shell que carrega o arquivo de configuração principal do Husky (h) para validar e processar commits de mesclagem antes de serem confirmados.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "pre-push": {
          "summary": "Hook do Git para o Husky executado antes de push para repositório remoto. Script shell que carrega o arquivo de configuração principal do Husky (h) para executar validações e testes antes de enviar alterações para o servidor remoto.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "pre-rebase": {
          "summary": "Hook do Git para o Husky executado antes de operações de rebase. Script shell mínimo que carrega o arquivo de configuração principal do Husky (h) para validar e preparar operações de rebase interativo no repositório.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "prepare-commit-msg": {
          "summary": "Hook do Git para o Husky executado para preparar mensagens de commit. Script shell que carrega o arquivo de configuração principal do Husky (h) para automatizar ou modificar mensagens de commit antes da edição pelo usuário.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        }
      },
      "pre-commit": {
        "summary": "Hook principal de pre-commit do Husky que executa scripts de validação antes de commits. Configurado para executar npm run lint, npm run test e npx lint-staged sequencialmente, garantindo qualidade do código através de linting, testes unitários e formatação automática antes de aceitar commits.",
        "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
      }
    },
    ".prettierignore": {
      "summary": "Arquivo de configuração do Prettier que define diretórios e arquivos a serem ignorados na formatação automática. Exclui node_modules, dist, coverage, logs, arquivos .env, package-lock.json, arquivos Markdown e o diretório web/dist para evitar formatação desnecessária de arquivos gerados ou de terceiros.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    ".prettierrc": {
      "summary": "Arquivo de configuração do Prettier com regras de formatação do projeto. Define uso de ponto-e-vírgula obrigatório, vírgulas finais em todas estruturas, aspas simples para strings, largura máxima de linha de 100 caracteres e indentação com 2 espaços, garantindo consistência de estilo no código.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "API_DOCUMENTATION.md": {
      "summary": "Documentação completa da API REST de automação desktop em português. Detalha todos os endpoints disponíveis (mouse, teclado, tela, clipboard, LLM), formatos de requisição/resposta, autenticação via API key, streaming de eventos SSE, códigos de erro HTTP, limites de sistema e exemplos práticos de uso com cURL e JavaScript para automação de tarefas desktop.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "DEEPSEEK_MODELS_RESEARCH.md": {
      "summary": "Documento de pesquisa sobre modelos DeepSeek suportados pelo LangChain.js. Lista modelos ativos (V3/chat, R1/reasoner, Coder), suas características técnicas, custos, suporte a tool calling e structured output. Inclui testes realizados, exemplos de implementação TypeScript e recomendações de uso para diferentes cenários de aplicação.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "DEEPSEEK_RESOLUTION.md": {
      "summary": "Documento técnico de resolução do erro 'Model Not Exist' na integração DeepSeek. Detalha a correção de inconsistência nos nomes de modelos, ajustes no enum LlmModel, configuração correta do LangChain adapter e testes bem-sucedidos dos modelos deepseek-chat e deepseek-reasoner com exemplos de requisições funcionais.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "NutJS-Desktop-Automation-API.postman_collection.json": {
      "summary": "Coleção Postman v2.1.0 completa para testes da API de automação desktop. Contém requisições organizadas por categoria (mouse, teclado, tela, clipboard, LLM), configuração de autenticação via x-api-key, scripts de pré-requisição e testes automatizados, variáveis de ambiente e exemplos de uso para todos os endpoints da API REST.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "README.md": {
      "summary": "Documentação principal do projeto NutJS REST API. Descreve a arquitetura Clean Architecture, instruções de instalação e configuração, comandos de desenvolvimento/build/produção, lista de endpoints disponíveis (mouse, screen, health), exemplos de uso com cURL e requisitos de permissões por sistema operacional (macOS, Linux, Windows).",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "debug-uiohook.js": {
      "summary": "Script de teste para debug do uiohook-napi que replica a configuração do GlobalInputCaptureService. Importa dinamicamente o módulo, configura listeners para eventos de mouse e teclado (mousedown, mouseup, mousemove, keydown, keyup), inicia a captura e implementa shutdown gracioso com SIGINT para identificar problemas de configuração.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "diagnose-uiohook.cjs": {
      "summary": "Script CommonJS de diagnóstico detalhado do uiohook-napi para macOS, verificando permissões de acessibilidade. Configura handlers com logs detalhados, contador de eventos, throttling para mousemove, exibe informações do sistema e encerra automaticamente após 20 segundos ou via Ctrl+C, auxiliando na identificação de problemas de captura.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "ecosystem.config.js": {
      "summary": "Configuração PM2 para gerenciamento de processo em produção. Define aplicação nutjs-api com uma instância em modo fork, limite de memória de 1GB para restart automático, variáveis de ambiente de produção (NODE_ENV, porta 3000), logs estruturados com timestamps em arquivos separados para erros e output padrão.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "error.txt": {
      "summary": "Log de execução capturando sessão de desenvolvimento e teste da API NutJS. Registra build TypeScript, inicialização do servidor Fastify na porta 3000, requisições HTTP recebidas com erro 404 para rotas não implementadas (/mouse/move, /mouse/click, /mouse/scroll, /mouse/position), incluindo detalhes de latência e IPs de origem.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "jest.config.js": {
      "summary": "Configuração Jest para testes com TypeScript e ESM. Define preset ts-jest/ESM, environment Node, mapeamento de módulos para resolver imports .js, transformação TypeScript com useESM, ignora node_modules exceto clipboardy, coverage mínimo de 80% em todas as métricas, timeout de 10s, setup em tests/setup.ts e exclusões de coverage.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "know-how.txt": {
      "summary": "Base de conhecimento técnico do projeto documentando soluções para problemas complexos encontrados durante desenvolvimento. Contém 100+ entradas datadas cobrindo testes com Jest/TypeScript, mocks de módulos ESM, coverage de schemas Zod, configuração de ambiente, buffers circulares, SSE, OCR, validações numéricas, dependency injection e padrões de teste específicos.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "lastPrompt.md": {
      "summary": "Documento extenso de especificação técnica e contexto do sistema NutJS Desktop Automation API. Define arquitetura completa, regras de negócio críticas, stack tecnológico (TypeScript, Fastify, React), padrões arquiteturais (Clean Architecture, DI), estrutura de pastas, convenções de código, estratégias de teste, segurança, performance e desafios conhecidos do projeto.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "package-lock.json": {
      "summary": "Arquivo de lock do npm versão 3 que fixa versões exatas de todas as dependências do projeto nutjs-rest-api v1.0.1. Garante builds reproduzíveis especificando versões precisas de frameworks principais (Fastify, React, Jest), bibliotecas de automação (nut-js, robotjs, uiohook-napi), OCR (tesseract.js), AI (langchain) e ferramentas de desenvolvimento.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "package.json": {
      "summary": "Manifesto principal do projeto nutjs-rest-api v1.0.1, configurando aplicação TypeScript ESM para automação desktop via REST API. Define stack tecnológica com @nut-tree-fork/nut-js, robotjs e uiohook-napi para controle de mouse/teclado, Fastify para servidor HTTP, React/Bootstrap para interface web, LangChain para integrações AI (OpenAI/DeepSeek), Tesseract.js para OCR, tsyringe para injeção de dependências, além de scripts completos para desenvolvimento com hot-reload (tsx watch), builds otimizados (TypeScript/Webpack), testes com Jest, linting/formatação com ESLint/Prettier e hooks Git via Husky para garantia de qualidade pré-commit.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "scripts": {
      "download-tessdata.js": {
        "summary": "Script Node.js para download automático dos arquivos de linguagem do Tesseract OCR (eng e por). Baixa traineddata comprimidos do CDN jsdelivr, cria diretório tessdata se necessário, exibe progresso do download, verifica arquivos existentes para evitar re-download, remove arquivos parciais em caso de erro e executado automaticamente no postinstall.",
        "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
      }
    },
    "server.log": {
      "summary": "Log de execução do servidor nutjs-rest-api capturando inicialização do NutJSScreenAdapter, EventBuffer, serviços de aplicação e captura global de eventos. Registra requisições HTTP recebidas com detalhes de métodos, URLs, IPs remotos, códigos de status e tempo de resposta em formato estruturado com timestamps UTC.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "src": {
      "config": {
        "dependency-injection.ts": {
          "summary": "Configuração central de injeção de dependências usando tsyringe com decoradores TypeScript. Registra adaptadores NutJS (mouse, screen, keyboard), serviços de aplicação (clipboard, LLM, OCR, executor), factories, dispatchers e controllers. Define singletons para pools de workers, buffers de eventos e serviços globais de captura, garantindo instanciação correta de toda arquitetura.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "environment.ts": {
          "summary": "Módulo de configuração de ambiente usando dotenv para carregar variáveis. Exporta objeto imutável com configurações do servidor (nodeEnv, port, host, logLevel), parâmetros de automação (mouseSpeed, screenConfidence), chaves de API (apiKey, openaiApiKey, deepseekApiKey) e helpers booleanos para verificar ambientes de desenvolvimento/produção.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "input-events.config.ts": {
          "summary": "Configuração para sistema de eventos de input com interface InputEventsConfig tipada. Define bufferSize, heartbeatMs, maxRate de eventos/segundo, maxEventAge e modo debug. Implementa validação rigorosa de limites (buffer 1-100k, heartbeat 1-300s, rate 1-50k/s) com carregamento de variáveis de ambiente e validação automática na inicialização.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "keyboard.config.ts": {
          "summary": "Configuração imutável para funcionalidades de teclado com carregamento via dotenv. Define defaultMode (instant/perChar/total), maxTextLength (10000 chars), defaultDelayPerChar, maxDelay (5 min), batchSize para processamento e debugMode. Inclui validação de configuração com verificação de limites e modos válidos para garantir integridade operacional.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "langchain.config.ts": {
          "summary": "Configuração de modelos LLM para integração com LangChain. Define defaultTemperature (0.7), defaultMaxTokens (1000), timeout (30s), retries (3) e configurações específicas por modelo (O3, GPT-4.1, GPT-4.1-mini, DeepSeek Chat/Reasoner/Coder) com maxTokens e costPerToken individuais. Exporta tipo SupportedModel para type safety.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "logger.ts": {
          "summary": "Configuração do sistema de logging usando Pino com suporte a ambientes. Em desenvolvimento usa pino-pretty para output colorizado e formatação humanizada com timestamps yyyy-mm-dd HH:MM:ss. Em produção usa formato JSON estruturado. Nível de log configurável via environment.logLevel, omitindo pid e hostname dos logs.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "mouse.config.ts": {
          "summary": "Configuração padrão para operações do mouse com objeto MouseDefaults imutável. Define minDuration (100ms), maxDuration (5s), defaultSmooth (false), sampleRate (30fps) para interpolação, streamInterval (100ms) para posição SSE e defaultDuration (1s). Valores configuráveis via variáveis de ambiente com prefixo MOUSE_. Exporta tipo MouseConfig.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "ocr.config.ts": {
          "summary": "Configuração completa do serviço OCR com interface OcrConfig tipada. Define limites operacionais (maxImageSizeMb 10, maxProcessingMs 30s), pool de workers baseado em CPUs, cache com TTL configurável, suporte multilíngue (eng, por, spa, fra, deu, ita, jpn, chi_sim), pré-processamento adaptativo (threshold, contrast, denoise, sharpen) e modos fast/balanced/accurate com validação rigorosa em produção.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "output-format.config.ts": {
          "summary": "Configuração do sistema de formatação de saída personalizada com interface OutputFormatConfig. Define maxSchemaSize (10KB), maxDepth (5 níveis), defaultMode string/object, parseTimeout (500ms), cache habilitado com TTL configurável e debug logs. Implementa validação de limites de segurança contra schemas recursivos e carregamento via variáveis de ambiente com prefixo OUTPUT_SCHEMA_.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        }
      },
      "index.ts": {
        "summary": "Arquivo principal de inicialização do servidor Fastify com configuração de reflect-metadata, injeção de dependências e registro de rotas API. Configura servidor HTTP com rotas de automação prefixadas em /api/v1, health check, servir arquivos estáticos da web e SPA fallback. Implementa graceful shutdown para SIGTERM/SIGINT, inicializa serviços via ApplicationStartupService e configura logging com pino/pino-pretty baseado em ambiente.",
        "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
      },
      "routes": {
        "automation.routes.ts": {
          "summary": "Plugin assíncrono do Fastify que centraliza registro de todas as rotas de automação. Instancia e registra controllers para AutomationController, KeyboardController (via buildRoutes), LLMController e OcrController (resolvido via DI). Também registra sub-rotas para status e streaming de eventos de input com prefixo /stream, organizando toda a API de automação.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "input-events.routes.ts": {
          "summary": "Plugin de rotas Fastify para streaming de eventos de input via SSE. Define endpoints GET /input-events para stream em tempo real com suporte a last-event-id, GET /input-events/stats para estatísticas do sistema (listeners, queue, buffer), POST /input-events/clear para limpar buffer e POST /input-events/prune para remover eventos antigos. Inclui schemas de validação detalhados e resolve InputEventsController via DI.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "status.routes.ts": {
          "summary": "Plugin de rotas Fastify para verificação de status da API usado pelo frontend. Implementa endpoint GET /status que retorna objeto com ok boolean, latência calculada em ms, mensagem descritiva e timestamp ISO. Em caso de erro retorna status 503 com ok=false. Usado para monitoramento de saúde da aplicação e verificação de disponibilidade.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        }
      },
      "test-endpoint.ts": {
        "summary": "Script de teste para validação de endpoints NutJS da API. Implementa funções assíncronas para testar mouse/move com smooth e duration, mouse/click com button left e mouse/position. Executa sequência de testes com delays entre operações, fazendo requisições HTTP POST/GET para localhost:3000/api/v1 e logando resultados no console para validação manual.",
        "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
      },
      "types": {
        "automation-builder.types.ts": {
          "summary": "Definições de tipos TypeScript compartilhados para sistema de automação, sincronizado com frontend. Define enums para ActionDevice (wait, clipboard, screen, llm, ocr, mouse, keyboard) e tipos de ação específicos. Interfaces detalhadas para payloads de cada dispositivo (MouseMovePayload, KeyboardTypePayload, LlmCompletionPayload etc). União discriminada AutomationAction com BaseAction. Constantes de validação para limites operacionais e helpers para teclas suportadas. Interface ActionFormState para gerenciamento de estado do formulário.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "extended-input-event.types.ts": {
          "summary": "Tipos TypeScript estendidos para eventos de input genéricos do sistema de gravação. Define GenericInputEvent com id, type (mouse/keyboard), timestamp e coordenadas cursor. Interfaces ExtendedMouseData com action (click/release/move) e ExtendedKeyboardData com key e action (down/up). União discriminada ExtendedInputEvent para type safety entre ExtendedMouseEvent e ExtendedKeyboardEvent.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "input-event.types.ts": {
          "summary": "Tipos TypeScript para eventos de input transmitidos via SSE. Define tipos EventSource e MouseButton, interface BaseInputEvent com id/source/ts. Interfaces específicas MouseClickEvent e KeyboardEvent com coordenadas x/y. União InputEvent para type safety. Interfaces IEventPublisher e IEventListener para padrão observer. SSEEventPayload para estrutura de dados do evento SSE com id e data.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "ocr.types.ts": {
          "summary": "Tipos TypeScript para funcionalidade OCR com estruturas hierárquicas de texto. Define OCRBoundingBox para coordenadas, interfaces aninhadas OCRWord/Line/Paragraph/Block com confidence e bbox. SimpleBoundingBox e OCRWordResponse para API responses. OCRResponse completo com success, text, confidence, words, lines e processingTime. PreprocessingOptions e OCRProcessingConfig para configuração. OCRMetrics para telemetria. Enum OCRErrorCode para tratamento de erros específicos do domínio.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "output-shape.ts": {
          "summary": "Tipos TypeScript para respostas dinâmicas da API LLM com suporte a formatos flexíveis. Define OutputShape genérico, DynamicLLMResponse com metadata opcional (model, finishReason, tokensUsed), LegacyLLMResponse para retrocompatibilidade. União LLMResponse suportando ambos formatos. Funções utilitárias createSuccessResponse e createErrorResponse para padronização. Type guards isLegacyResponse e isDynamicResponse para narrowing seguro de tipos em runtime.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        }
      }
    },
    "tessdata": {
      "README.md": {
        "summary": "Documentação dos arquivos de dados do Tesseract OCR. Contém instruções para download e configuração dos arquivos traineddata necessários para reconhecimento óptico de caracteres em inglês e português, incluindo scripts de download automático e manual, além de orientações para adicionar novos idiomas ao sistema de OCR.",
        "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
      }
    },
    "test-deepseek-coder.js": {
      "summary": "Script de teste Node.js para verificar a integração com o modelo DeepSeek Coder via API local. Realiza uma requisição POST para o endpoint /api/v1/llm testando a geração de código Python (função factorial) usando o modelo deepseek-coder, incluindo validação de resposta e tratamento de erros com logs detalhados.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "test-deepseek.js": {
      "summary": "Script de teste Node.js para validar a integração com os modelos DeepSeek Chat e Reasoner. Oferece testes individuais ou em lote para ambos os modelos, enviando prompts sobre automação desktop e verificando respostas, status HTTP e metadados como tokens utilizados, com opção de executar testes via flag --both.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "test-input-events.html": {
      "summary": "Interface HTML de teste para streaming de eventos de entrada via Server-Sent Events (SSE). Página web interativa que conecta ao endpoint /api/v1/stream/input-events, exibe eventos de mouse e teclado em tempo real, mantém estatísticas de uso, permite pausar/retomar captura e salva configuração de API key no localStorage. Inclui validação visual com cores distintas para tipos de eventos.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "test-prompts.json": {
      "summary": "Arquivo JSON extenso contendo conjunto de prompts de teste para geração automatizada de testes Jest com TypeScript. Define templates, estratégias e padrões para maximização de coverage, incluindo instruções detalhadas sobre criação de testes para componentes React, classes, funções utilitárias e DTOs, com sistema de gestão de conhecimento via know-how.txt para documentar e reutilizar soluções de testes bem-sucedidos.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "test-screen-capture.js": {
      "summary": "Script Node.js de validação completa do sistema de captura de tela. Executa teste end-to-end fazendo requisição POST para /api/v1/screen/capture, decodifica a resposta base64, salva como arquivo PNG local e valida a integridade do arquivo verificando tamanho, header PNG e assinatura binária. Inclui logs detalhados com emojis para cada etapa do processo.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "test-uiohook-direct.cjs": {
      "summary": "Script CommonJS de teste direto da biblioteca uiohook-napi para captura de eventos do sistema. Configura listeners para eventos de mouse (move, down, up) e teclado (down, up), iniciando a captura e exibindo eventos em tempo real no console. Inclui tratamento de shutdown gracioso com SIGINT para encerramento adequado do hook.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "test.js": {
      "summary": "Arquivo JavaScript mínimo de teste contendo apenas um console.log simples. Utilizado provavelmente para verificação rápida de ambiente ou configuração básica do Node.js.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "tsconfig.json": {
      "summary": "Arquivo de configuração principal do TypeScript para o projeto. Define compilação para ES2022 com módulos ESNext, strict mode habilitado, suporte a decorators experimentais, source maps, declarations e resolução de módulos JSON. Configura diretórios src como raiz e dist como saída, excluindo node_modules e arquivos de teste.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "tsconfig.prod.json": {
      "summary": "Configuração TypeScript otimizada para produção, estendendo tsconfig.json base. Desabilita source maps, remove comentários do código compilado e exclui arquivos de desenvolvimento como testes, test-endpoint.ts, diretório tests, coverage e configurações do VSCode para reduzir tamanho do bundle de produção.",
      "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
    },
    "web": {
      ".env": {
        "summary": "Arquivo de configuração de variáveis de ambiente para o frontend React contendo chave de API (B77qfdp27w@), URL da API (localhost:3000) e modo de desenvolvimento. Define parâmetros essenciais para comunicação entre o frontend web e a API de automação desktop.",
        "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
      },
      ".env.example": {
        "summary": "Template de exemplo para configuração de variáveis de ambiente do frontend React com placeholders para chave de API, URL da API e modo Node. Guia para configuração inicial do ambiente web sem expor credenciais sensíveis.",
        "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
      },
      ".env.safe": {
        "summary": "Arquivo de definição de variáveis de ambiente vazias para REACT_APP_API_KEY, REACT_APP_API_URL e NODE_ENV. Serve como modelo seguro indicando quais variáveis devem ser configuradas sem expor valores reais.",
        "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
      },
      ".eslintignore": {
        "summary": "Configuração do ESLint para ignorar análise em node_modules, dist, build, arquivos JS/CJS, webpack config, coverage e arquivos de ambiente (.env). Define escopo de exclusão para linting no projeto web React.",
        "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
      },
      ".eslintrc.js": {
        "summary": "Configuração ESLint CommonJS para projeto React/TypeScript com parser TypeScript, regras para React hooks, desabilitando react-in-jsx-scope e prop-types. Define padrões de código com prefer-const, no-var, no-unused-vars e validação de hooks com overrides para arquivos de tipos.",
        "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
      },
      "ACTION_BUILDER_README.md": {
        "summary": "Documentação completa do componente ActionBuilder para construção visual de sequências de automação mouse/teclado. Descreve instalação, uso, props, estrutura de dados, validações rigorosas, persistência, integração com API NutJS, arquitetura e exemplos práticos de implementação com até 100 ações configuráveis.",
        "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
      },
      "README.md": {
        "summary": "Documentação da interface web React/TypeScript para API NutJS com estrutura do projeto, instruções de execução (dev/prod), tecnologias utilizadas (React 18, Bootstrap 5, Webpack 5), funcionalidades disponíveis, endpoints da API e sugestões de próximos passos para expansão da aplicação.",
        "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
      },
      "install-action-builder-deps.sh": {
        "summary": "Script Bash para instalação automática de dependências do ActionBuilder incluindo nanoid para geração de IDs únicos, react-bootstrap-icons para ícones e @types/nanoid para tipagem TypeScript. Automatiza setup inicial do componente de construção de automações.",
        "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
      },
      "package-lock.json": {
        "summary": "Arquivo de lock do NPM com versões fixas de todas as dependências do projeto web React. Garante reprodutibilidade da instalação incluindo React 18, TypeScript, Webpack, ESLint, Bootstrap, Axios, nanoid e react-router-dom com suas sub-dependências exatas.",
        "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
      },
      "package.json": {
        "summary": "Manifesto NPM do projeto web nutjs-desktop-automation-web com scripts de build/dev/lint, dependências principais (React 18, Bootstrap, Axios, nanoid, react-router-dom) e devDependencies (TypeScript, Webpack, ESLint, loaders CSS/TS). Define configuração e estrutura de dependências do frontend.",
        "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
      },
      "public": {
        "index.html": {
          "summary": "Documento HTML principal da aplicação web com estrutura básica Bootstrap 5 e Font Awesome. Define meta tags responsivas, título da aplicação NutJS Desktop Automation API, importa estilos e scripts do Bootstrap, configurado com tema dark e container root para renderização React.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        }
      },
      "src": {
        "App.tsx": {
          "summary": "Componente React principal da aplicação que configura roteamento com React Router. Define duas rotas: HomePage na raiz (/) e AutomationPage em /automation. Importa estilos globais e serve como componente container para navegação entre páginas da interface de automação.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        },
        "index.tsx": {
          "summary": "Ponto de entrada React que inicializa a aplicação usando ReactDOM.createRoot API do React 18. Renderiza o componente App em modo StrictMode no elemento root do DOM, importa estilos globais index.css e configura a montagem inicial da aplicação TypeScript.",
          "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
        }
      },
      "tsconfig.json": {
        "summary": "Configuração TypeScript para projeto React com target ES2020, suporte DOM, módulos ESNext e resolução Node. Habilita strict mode, JSX react-jsx, importação de JSON e JavaScript, com configurações para consistência de casing, esModuleInterop e synthetic imports. Inclui src e exclui node_modules/dist.",
        "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
      },
      "webpack.config.cjs": {
        "summary": "Configuração Webpack em CommonJS para build do frontend React/TypeScript. Define entry point em web/src/index.tsx, output para dist/web com clean build, loaders para TypeScript e CSS, HtmlWebpackPlugin com template e devServer na porta 3001 com hot reload e compressão.",
        "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
      },
      "webpack.config.js": {
        "summary": "Configuração Webpack principal com suporte a variáveis de ambiente via Dotenv, build otimizado com contenthash, loaders para TypeScript/CSS/imagens, proxy para API na porta 3000 e devServer configurado. Usa DefinePlugin para NODE_ENV e HtmlWebpackPlugin com injeção no body.",
        "commit": "c6146aff2b5bd84e187c46883c072f3573a0fb6a"
      }
    }
  }
}

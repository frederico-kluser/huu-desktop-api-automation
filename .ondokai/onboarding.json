{
  "project_metadata": {
    "name": "NutJS REST API for Desktop UI Automation via HTTP",
    "domain": [
      "Desktop UI Automation",
      "Input Device Control",
      "Computer Vision",
      "REST API Backend",
      "Automated Testing",
      "Clipboard Management",
      "Keyboard Input Automation",
      "Command Execution",
      "Robotic Process Automation (RPA)"
    ],
    "current_phase": [
      "Production",
      "MVP",
      "Version 1.0.0",
      "Stable with full features",
      "Active Development",
      "Pre-production",
      "Optimized Build",
      "Integration Testing",
      "Unit Tests Implemented",
      "Maintenance"
    ],
    "critical_business_rules": [
      "System permissions must be respected",
      "Strict input validation to prevent invalid commands",
      "Maintain integrity of automation operations",
      "Continuous service availability",
      "Automatic restart on excessive memory usage",
      "Error and output logs for auditing",
      "Safe execution of UI commands",
      "Strict validation of coordinates to prevent out-of-bounds actions",
      "Duration limits between 100 and 5000 ms",
      "Minimum confidence threshold for image recognition",
      "Consistent error handling",
      "Reliable asynchronous execution",
      "Environment variables must be correctly defined",
      "API key must not be empty in production",
      "Standardized result return for integration",
      "Extensibility for new command types",
      "Immutability of actions after creation",
      "Stop execution on command failure",
      "Detailed success/failure results",
      "API responses must maintain integrity",
      "Precise cursor movement",
      "Correct mouse button mapping",
      "Reliable execution of clicks and drags",
      "Minimum image recognition accuracy",
      "Timeouts for visual element waits",
      "Strict input data validation",
      "Authentication required for data streaming",
      "Clear and standardized error messages",
      "No stack trace exposure in production",
      "Immediate response to invalid data with status 400",
      "API automation endpoints must be available",
      "Strict typing to avoid bugs",
      "Sensitive config files must not be versioned",
      "No versioning of dependencies and generated artifacts",
      "Copied content must not be empty or exceed 1 MB",
      "Typed text must not contain dangerous control characters",
      "Maximum typing length of 10,000 characters",
      "Maximum allowed delay of 300,000ms (5 minutes)",
      "Clipboard operations must not corrupt system clipboard state",
      "Keyboard actions must be executed in correct sequence and timing",
      "Payloads must conform to JSON Schema Draft 7",
      "Clipboard content must be a non-empty string",
      "No additional properties allowed in requests",
      "Input data must be validated strictly to prevent injection or malformed commands"
    ]
  },
  "technical_stack": {
    "primary_language": [
      "TypeScript 5.x",
      "Node.js 18.x",
      "JavaScript (Node.js)"
    ],
    "frameworks": [
      "Fastify 4.x",
      "TSyringe 4.x",
      "Zod 3.x",
      "PM2 5.x",
      "Jest 29.x",
      "ESLint 8.x",
      "dotenv 16.x",
      "Pino 8.x",
      "@nut-tree-fork/nut-js 4.x",
      "clipboardy 3.x",
      "Tesseract OCR 5.x",
      "OpenCV 4.7"
    ],
    "databases": [
      "PostgreSQL 15"
    ],
    "external_services": [
      "@nut-tree-fork/nut-js",
      "clipboardy",
      "dotenv for environment configuration",
      "Local REST API NutJS Mouse Control",
      "Cloud Storage API",
      "Authentication Service (OAuth2)",
      "EventSource (SSE client)",
      "Environment Variables (process.env)",
      "Pino logger"
    ],
    "package_manager": [
      "npm",
      "yarn",
      "pip"
    ]
  },
  "architecture_patterns": {
    "design_pattern": [
      "Clean Architecture",
      "Dependency Injection",
      "Command Pattern",
      "Adapter Pattern",
      "Service Layer",
      "Schema Validation Pattern",
      "REST API",
      "Layered Architecture",
      "Controller Pattern",
      "Middleware Pattern",
      "Factory Method",
      "Singleton",
      "Strategy Pattern",
      "DTO",
      "Modular Architecture",
      "Plugin Architecture"
    ],
    "folder_structure": [
      "src/ - main source code",
      "dist/ - build output",
      "tests/ - unit and integration tests",
      "config/ - global configuration files",
      "domain/entities - domain entities",
      "domain/use-cases - use cases",
      "application/services - business logic and services",
      "infrastructure/adapters - hardware and external adapters",
      "interface/controllers - HTTP route controllers",
      "schemas/ - Zod and JSON Schema definitions",
      "middleware/ - validation and error handling",
      "logs/ - log files",
      "node_modules/ - external dependencies",
      "coverage/ - test coverage reports"
    ],
    "naming_conventions": [
      "camelCase for variables and functions",
      "PascalCase for classes and types",
      "kebab-case for files",
      "Suffix Service for service classes",
      "Suffix Adapter for adapters",
      "Prefix I for interfaces",
      "snake_case for environment variables",
      "Suffix Middleware for middleware",
      "Suffix Controller for controllers",
      "Suffix Schema for validation objects"
    ],
    "module_boundaries": [
      "Unidirectional dependencies from Domain to Application, Infrastructure, and Interface",
      "Clear separation between business logic and infrastructure",
      "Dependency injection to decouple modules",
      "Isolated configuration in its own module",
      "Controllers depend on services via DI",
      "Services depend on domain interfaces",
      "DTOs and schemas isolate validation and typing",
      "Middleware decouples validation from main logic",
      "No circular dependencies",
      "Domain does not depend on infrastructure",
      "Infrastructure implements interfaces defined in domain",
      "Separation between production code and tests"
    ]
  },
  "code_standards": {
    "style_guide": [
      "Airbnb JavaScript/TypeScript Style Guide",
      "ESLint Recommended",
      "Prettier",
      "TypeScript ESLint Recommended"
    ],
    "linting_rules": [
      "ESLint with @typescript-eslint plugin",
      "eslint-config-prettier to disable conflicting rules",
      "No explicit any except in controlled cases",
      "Mandatory use of async/await for async operations",
      "Prohibition of implicit any",
      "Rules for import organization",
      "No unused variables",
      "Consistent async/await usage"
    ],
    "formatting": [
      "Prettier with default settings",
      "semi: true",
      "singleQuote: true",
      "trailingComma: all",
      "printWidth: 100",
      "tabWidth: 2"
    ],
    "documentation_style": [
      "JSDoc for functions and classes",
      "JSDoc for public methods",
      "Inline comments for context"
    ],
    "type_checking": [
      "Strict TypeScript",
      "strictNullChecks",
      "noImplicitAny",
      "Explicit typing on DTOs and service interfaces"
    ]
  },
  "testing_strategy": {
    "test_framework": [
      "Jest 29.x",
      "Pytest 7.4"
    ],
    "test_structure": [
      "tests/unit for unit tests",
      "tests/integration for integration tests",
      "Tests located in __tests__ folders adjacent to source files",
      "Mocks for external dependencies"
    ],
    "coverage_requirements": [
      "Minimum 80% coverage",
      "branches >= 80%",
      "functions >= 80%",
      "lines >= 80%",
      "statements >= 80%"
    ],
    "test_patterns": [
      "Arrange-Act-Assert (AAA)",
      "Given-When-Then",
      "Use of mocks for external dependencies",
      "Async tests with fake timers"
    ],
    "mocking_approach": [
      "Jest mocks and fixtures",
      "Mocks for MouseService and ScreenService",
      "Mocks for external services and dependency injection",
      "Mocks for FastifyRequest and FastifyReply",
      "Mocks for clipboardy",
      "Mocks for IKeyboardAdapter using jest.mock or ts-mockito"
    ]
  },
  "development_workflow": {
    "branch_strategy": [
      "GitHub Flow",
      "git Flow"
    ],
    "commit_conventions": [
      "Conventional Commits"
    ],
    "pr_requirements": [
      "Code review mandatory",
      "Passing CI checks",
      "Automated tests passing",
      "Lint and test checks"
    ],
    "ci_cd_pipeline": [
      "Linting",
      "Testing",
      "Build",
      "Deployment",
      "Unit tests",
      "Integration tests",
      "Automated deploy"
    ]
  },
  "commands": {
    "setup": [
      "cp .env.example .env",
      "npm install",
      "python -m venv venv && source venv/bin/activate && pip install -r requirements.txt"
    ],
    "install": [
      "npm install",
      "yarn install",
      "pip install -r requirements.txt"
    ],
    "dev": [
      "npm run dev",
      "tsc --watch",
      "flask run --reload"
    ],
    "test": [
      "npm test",
      "npm run test",
      "pytest --cov=ocr_module tests/"
    ],
    "build": [
      "npm run build",
      "npm run build:prod",
      "tsc",
      "docker build -t ocr-service ."
    ],
    "lint": [
      "npm run lint",
      "npx eslint .",
      "eslint . --ext .ts,.tsx",
      "flake8 ocr_module/"
    ],
    "format": [
      "npm run format",
      "npx prettier --write .",
      "prettier --write .",
      "black ocr_module/"
    ]
  },
  "security_constraints": {
    "authentication_method": [
      "API Key via header x-api-key",
      "JWT (Fastify context)",
      "OAuth2",
      "Not implemented explicitly, recommended for production"
    ],
    "authorization_rules": [
      "API Key validation for streaming endpoint",
      "Role-based access control for API endpoints",
      "Unauthorized and Forbidden errors handled explicitly",
      "Rejection of requests without or with invalid API key"
    ],
    "sensitive_data": [
      "Environment variables for configuration",
      "API_KEY stored in environment variables, not exposed in logs",
      "Buffers of base64 images must be handled carefully to avoid leaks",
      "Clipboard content may contain sensitive data, must be handled with care",
      "Typed text may contain sensitive data, partial sanitization applied",
      "JWT tokens",
      "Database credentials",
      ".env files"
    ],
    "security_headers": [
      "Content-Security-Policy",
      "X-Content-Type-Options",
      "Strict-Transport-Security",
      "Cache-Control: no-cache",
      "Content-Type: application/json",
      "Validation of x-api-key header",
      "Recommended use of helmet in production"
    ],
    "encryption_requirements": [
      "TLS 1.3 for data in transit",
      "AES-256 for data at rest",
      "HTTPS recommended for secure transmission",
      "Secure storage of tokens"
    ]
  },
  "performance_requirements": {
    "response_time_limits": [
      "Low latency expected for API calls (<200ms for main endpoints)",
      "Minimum duration 100ms, maximum 5000ms for actions",
      "Async execution with configurable timeouts",
      "Smooth mouse movements must respect configured duration",
      "Timeout for template wait (default 5000ms)",
      "At least 5 events per second for streaming",
      "Fast error responses to avoid UX impact",
      "Instant operations should execute immediately",
      "Clipboard operations should have low latency"
    ],
    "optimization_priorities": [
      "Speed and responsiveness for automation commands",
      "Memory control to avoid crashes",
      "Efficient UI manipulation",
      "Reliability and precision over raw speed",
      "Low overhead for object creation",
      "Efficient resource usage for SSE streaming",
      "Efficient validation to avoid overhead on large payloads",
      "Balance between smoothness and responsiveness",
      "Fast and reliable keyboard and clipboard operations"
    ],
    "caching_strategy": [
      "No explicit caching implemented",
      "In-memory cache for static configuration data",
      "Cache processed images and extracted text for 24 hours"
    ],
    "scalability_considerations": [
      "Modular architecture enables horizontal scaling",
      "Scalability via multiple Fastify instances",
      "SSE streaming may require load balancing for multiple clients",
      "Stateless middleware for scalability",
      "Support for multiple simultaneous validations",
      "Service is local, scalability depends on host environment"
    ]
  },
  "error_handling": {
    "error_format": [
      "Standard JSON with success, error, and data fields",
      "Validation via Zod with standardized messages",
      "Centralized error handler middleware format",
      "CommandResult with success boolean and optional error string",
      "JSON Schema Validation Error"
    ],
    "logging_strategy": [
      "Structured logging with Pino and pino-pretty",
      "Separate logs for errors (logs/error.log) and output (logs/out.log)",
      "Log level configurable via environment variable",
      "Logs disabled in tests (logger: false)",
      "Stack trace only in development"
    ],
    "monitoring_tools": [
      "PM2 for monitoring and automatic restart",
      "Prometheus",
      "Grafana"
    ],
    "error_recovery": [
      "Automatic process restart on memory limit (1G)",
      "Error handling via Fastify middleware",
      "Immediate response with status 400 for validation errors",
      "Graceful shutdown to avoid request loss",
      "Stop execution on error, no automatic retry",
      "Structured error return for client handling"
    ]
  },
  "dependencies_context": {
    "critical_dependencies": [
      "@nut-tree-fork/nut-js",
      "Fastify",
      "TSyringe",
      "Zod",
      "Node.js",
      "PM2",
      "Pino",
      "dotenv",
      "clipboardy",
      "Jest",
      "TypeScript",
      "ESLint",
      "Tesseract OCR",
      "OpenCV"
    ],
    "deprecated_packages": [
      "None identified"
    ],
    "version_constraints": [
      "@nut-tree-fork/nut-js ^4.2.0",
      "fastify ^4.24.0",
      "typescript ^5.3.2",
      "zod >=3.0.0 <4.0.0",
      "tsyringe >=4.0.0",
      "pino 8.x",
      "clipboardy >=3.0.0",
      "dotenv >=16.0",
      "Jest >=29.x",
      "Node.js >=18.x",
      "ECMAScript 2022"
    ],
    "internal_packages": [
      "domain/entities",
      "domain/use-cases",
      "application/services",
      "infrastructure/adapters",
      "interface/controllers",
      "schemas",
      "config",
      "middleware",
      "src/config",
      "src/domain/entities/mouse-action.js",
      "src/application/services/mouse.service.js",
      "src/application/services/keyboard.service.js"
    ]
  },
  "current_challenges": {
    "technical_debt": [
      "Error handling could be more granular",
      "Input validation can be strengthened",
      "Pending implementation of audit:roadmap",
      "Temporary use of any for images",
      "Authentication is simple and may be insufficient for production",
      "Incomplete controller documentation",
      "Limited integration tests",
      "Test coverage can be expanded for edge cases",
      "Clipboard content size limit is fixed at 1MB, may be inflexible",
      "Sanitization may not cover all cases",
      "Lack of explicit validation for environment variable values",
      "No formal automated tests for some modules"
    ],
    "known_issues": [
      "Possible latency in smooth scrolls with high duration",
      "Potential overhead in frequent base64 decoding",
      "Risk of exceptions if execute is not overridden",
      "Possible failure in correct dimension detection for non-square buffers",
      "Possible overhead in continuous streaming without connection control",
      "Clipboardy may show inconsistencies on some OS",
      "Possible slowness in long texts with high delays",
      "No explicit validation for environment variable values",
      "Possible exposure of sensitive operations without access control",
      "Possible acceptance of payloads larger than 1MB"
    ],
    "performance_bottlenecks": [
      "Limitation to one instance may impact performance under high load",
      "Potential latency in UI automation depending on environment",
      "Async loops in scroll may impact performance",
      "Sequential execution may limit throughput",
      "SSE streaming may impact CPU and memory at scale",
      "Image preprocessing step is CPU intensive",
      "Interpolated movements may be costly at high frequency",
      "Clipboard operations may impact latency if not optimized"
    ],
    "migration_status": [
      "Initial project, no migrations in progress",
      "Migration to Fastify 4 completed",
      "Stable, no migrations ongoing"
    ]
  },
  "team_preferences": {
    "code_review_focus": [
      "Code quality",
      "Test coverage",
      "Security and validation",
      "Type and boundary validation",
      "Naming consistency",
      "Error handling validation",
      "Dependency injection consistency",
      "Clear separation of responsibilities",
      "Strict typing",
      "Documentation clarity",
      "No unjustified use of any",
      "Environment variable validation",
      "Correct implementation of execute method",
      "Consistent error handling",
      "Test coverage for all error cases",
      "Correct schema validation",
      "Route security",
      "Clarity and readability",
      "Strict typing verification",
      "Build exclusion compliance",
      "Lint standards compliance",
      "Folder structure maintenance",
      "Correct exclusion of temp and sensitive files",
      "OCR logic correctness",
      "Performance optimizations",
      "Security compliance",
      "Parameter validation",
      "Async/await correctness",
      "Input validation, error handling, logging, security",
      "JSON Schema compliance"
    ],
    "documentation_requirements": [
      "Clear documentation via JSDoc and README",
      "Inline documentation with JSDoc",
      "Clear documentation of schemas and types",
      "Document public methods and command contracts",
      "Document environment variables and default values",
      "JSDoc for all public methods",
      "Clear documentation for each implemented service",
      "Clear documentation for error classes and handlers",
      "JSDoc for all schemas and types"
    ],
    "communication_style": [
      "Clear and objective comments",
      "Use of PRs for discussions",
      "Technical and objective comments",
      "Comments in Portuguese for context",
      "Use of technical terms in English for precision",
      "Objective and informative comments"
    ],
    "decision_log": [
      "Adoption of Fastify for performance",
      "Use of tsyringe for DI",
      "Validation with Zod",
      "Separation between mouse and screen services",
      "Use of Dependency Injection for testability and modularity",
      "Use of NutJS for device automation",
      "Use of dotenv for configuration",
      "Command pattern for modularity and extensibility",
      "Factory Method for action creation",
      "Strict typing and experimental decorators",
      "ESLint and Jest for code quality and testing",
      "Global error handling in middleware",
      "API key for authentication",
      "Streaming via Server-Sent Events (SSE)",
      "Linear interpolation for smooth movement",
      "Adapter pattern for hardware abstraction",
      "Strict coordinate validation",
      "Declarative validation with Zod",
      "1MB limit for clipboard content",
      "Strategy Pattern for typing flexibility",
      "Immutable configuration for safety",
      "Interfaces for standardizing service responses",
      "Marker interface for automation services",
      "JSON Schema Draft 7 for compatibility and standardization"
    ]
  },
  "api_specifications": {
    "api_style": [
      "REST",
      "RESTful API",
      "REST with HTTP POST and GET endpoints",
      "REST with SSE endpoint for streaming"
    ],
    "versioning_strategy": [
      "Versioning via URL (/api/v1/)",
      "Semantic versioning via package.json",
      "URI versioning (e.g., /api/v1/)"
    ],
    "response_formats": [
      "JSON",
      "{ success: boolean, error?: string, data?: any }",
      "Base64 encoded images",
      "Arrays of MatchResult",
      "CommandResult with success, data, and error"
    ],
    "rate_limiting": [
      "Configurable rate limiting via Fastify plugins",
      "1000 requests per minute per user"
    ]
  },
  "deployment_context": {
    "environments": [
      "development (http://localhost:3000)",
      "production (configurable via .env)",
      "staging",
      "test"
    ],
    "deployment_method": [
      "PM2 process manager",
      "Docker container",
      "Node.js server",
      "CI/CD pipelines",
      "Kubernetes"
    ],
    "environment_variables": [
      "NODE_ENV",
      "PORT",
      "HOST",
      "LOG_LEVEL",
      "MOUSE_SPEED",
      "SCREEN_CONFIDENCE",
      "API_KEY",
      "JWT_SECRET",
      "DATABASE_URL",
      "REDIS_URL",
      "MOUSE_MIN_DUR",
      "MOUSE_MAX_DUR",
      "MOUSE_DEFAULT_SMOOTH",
      "MOUSE_SAMPLE_RATE",
      "MOUSE_STREAM_INTERVAL",
      "MOUSE_DEFAULT_DURATION",
      "KEYBOARD_DEFAULT_MODE",
      "KEYBOARD_MAX_TEXT_LENGTH",
      "KEYBOARD_DEFAULT_DELAY_PER_CHAR",
      "KEYBOARD_MAX_DELAY",
      "KEYBOARD_BATCH_SIZE",
      "KEYBOARD_DEBUG"
    ],
    "infrastructure_constraints": [
      "Accessibility permissions on macOS",
      "DISPLAY variable on Linux",
      "Memory limit set to 1G for automatic restart",
      "Requires Node.js >=18",
      "Compatible with Linux, Windows, and macOS",
      "Requires graphical environment for mouse control",
      "Persistent connections required for SSE",
      "Clipboard support depends on OS",
      "Access to hardware or input layer for IKeyboardAdapter",
      "Maximum delay and batch size limits to prevent overload"
    ]
  },
  "lastCommitHash": "9b5441406496b026ee8c6d20b336c95f34426e93"
}

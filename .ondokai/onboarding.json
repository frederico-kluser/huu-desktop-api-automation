{
  "project_metadata": {
    "name": "NutJS REST API for Desktop Automation and Real-Time Input Event Streaming",
    "domain": [
      "Desktop Automation",
      "Input Device Control",
      "Screen Capture",
      "Clipboard Management",
      "User Interaction Monitoring",
      "UI Automation",
      "Backend API",
      "Software Testing",
      "Event Streaming",
      "Robotic Process Automation (RPA)",
      "Quality Assurance",
      "Image Processing",
      "Authentication",
      "Access Control"
    ],
    "current_phase": [
      "Production",
      "Maintenance",
      "MVP",
      "Stable Configuration",
      "Development",
      "Testing Automation"
    ],
    "critical_business_rules": [
      "Maintain a clean environment by avoiding temporary and sensitive files in version control",
      "Enforce code quality via linting and strict type checking",
      "Automated tests must achieve at least 80% coverage for branches, functions, lines, and statements",
      "All API operations require authentication via API key",
      "Strict validation of input parameters to prevent invalid commands",
      "Limit size and duration for typing and screen capture operations",
      "Ensure data integrity and security for SSE event streaming",
      "Mouse and screen control operations must be executed reliably and securely",
      "Clipboard operations must be validated and protected against injection or overflow",
      "Maintain chronological order and uniqueness of input events",
      "Consistent and complete logging for auditing and troubleshooting",
      "Connections for event streaming must be persistent and properly closed to avoid leaks",
      "Rate limiting to prevent system overload (maxRate between 1 and 50000 events/s)",
      "Buffer size and event age must be within configured limits to avoid memory overflow",
      "All endpoints must respond with standardized success or error formats",
      "API key must never be exposed in logs or code",
      "Environment variables must be defined and valid to avoid startup failures",
      "Proper HTTP status codes and error response formats must be used",
      "No unauthorized access to protected endpoints; unauthorized requests must return 401",
      "Clipboard content must be validated and sanitized",
      "Text input must not be empty, contain only control characters, or exceed 10000 characters",
      "Key combinations are limited to a maximum of 5 valid keys",
      "Delays and durations must be within configured bounds (e.g., maxDelay <= 3600000 ms)",
      "Singleton pattern enforced for EventDispatcher and EventBuffer",
      "Shutdown must be graceful to avoid request loss",
      "Strict adherence to JSON Schema Draft 7 for input validation",
      "No additional properties allowed in requests beyond schema definitions",
      "Production logs must be performant and minimal; development logs must be human-readable"
    ]
  },
  "technical_stack": {
    "primary_language": ["TypeScript 5.x", "Node.js 18+", "JavaScript (ESM)"],
    "frameworks": [
      "Fastify 4.x",
      "Jest 29.x",
      "ESLint 8.x",
      "Prettier 2.x",
      "TSyringe 4.x",
      "Zod 3.x",
      "NutJS 2.x",
      "Pino Logger"
    ],
    "databases": ["None"],
    "external_services": [
      "Server-Sent Events (SSE) for streaming",
      "NutJS",
      "clipboardy (clipboard management)",
      "sharp (image processing)",
      "nanoid (ID generation)",
      "dotenv (environment variable management)",
      "Local REST API at http://localhost:3000"
    ],
    "package_manager": ["npm", "yarn"]
  },
  "architecture_patterns": {
    "design_pattern": [
      "Modular Architecture",
      "REST API",
      "Event-driven Architecture",
      "Clean Architecture",
      "Dependency Injection",
      "Schema Validation",
      "Singleton",
      "Adapter Pattern",
      "Controller-Service Pattern",
      "Middleware Pattern",
      "Circular Buffer",
      "Rate Limiter",
      "Factory Method",
      "Observer Pattern",
      "DTO Pattern",
      "Configuration Management",
      "Fail-fast Validation",
      "Feature Flags",
      "Unified Response Pattern"
    ],
    "folder_structure": [
      "src/ - main source code",
      "dist/ - compiled output",
      "tests/ - unit and integration tests",
      "config/ - environment and logger configuration",
      "services/ - automation and event handling logic",
      "controllers/ - HTTP endpoints and orchestration",
      "middleware/ - authentication and validation",
      "schemas/ - JSON Schema and DTO validation",
      "types/ - shared TypeScript types",
      "domain/entities - domain models and types",
      "infrastructure/adapters - external library adapters",
      "application/services - business logic and interfaces",
      "logs/ - log files",
      "coverage/ - test coverage reports",
      "node_modules/ - dependencies"
    ],
    "naming_conventions": [
      "camelCase for variables and functions",
      "PascalCase for classes and types",
      "kebab-case for files and routes",
      "UPPER_SNAKE_CASE for environment variables and constants",
      "Interfaces prefixed with 'I' (e.g., IKeyboardAdapter)",
      "Test files end with .test.ts or .spec.ts",
      "Prefix api/v1 for versioned routes"
    ],
    "module_boundaries": [
      "Clear separation between source code, tests, logs, and build artifacts",
      "Controllers depend on services via dependency injection",
      "Domain does not depend on Application or Infrastructure",
      "Application depends on Domain",
      "Infrastructure depends on Application",
      "Services implement domain interfaces",
      "Schemas and DTOs are isolated from business logic",
      "Configuration is centralized and isolated",
      "Types are exported for strong typing across modules",
      "Middleware is isolated for authentication and validation",
      "No circular dependencies; unidirectional dependency flow"
    ]
  },
  "code_standards": {
    "style_guide": [
      "Airbnb JavaScript/TypeScript Style Guide",
      "ESLint Recommended",
      "TypeScript ESLint Recommended",
      "Prettier"
    ],
    "linting_rules": [
      "Configured via .eslintrc.js",
      "ESLint with @typescript-eslint plugin",
      "No explicit any allowed",
      "Strict type checking enforced",
      "Ordered imports",
      "No console except for logger",
      "Async/await and promise handling rules"
    ],
    "formatting": [
      "Prettier with project default configuration",
      "2-space indentation",
      "semi: true",
      "singleQuote: true",
      "trailingComma: all",
      "printWidth: 100",
      "Integrated with ESLint for consistent formatting"
    ],
    "documentation_style": [
      "JSDoc for functions, classes, and interfaces",
      "JSDoc for public methods and exported types",
      "JSDoc for schemas and DTOs"
    ],
    "type_checking": [
      "Strict TypeScript (strict mode enabled)",
      "tsconfig with strict settings",
      "Explicit types for parameters and return values",
      "Runtime validation with Zod"
    ]
  },
  "testing_strategy": {
    "test_framework": ["Jest 29.x", "ts-jest"],
    "test_structure": [
      "tests/unit for unit tests",
      "tests/integration for integration tests",
      "Test files end with .test.ts or .spec.ts",
      "Coverage stored in coverage/",
      "Config via jest.config.js"
    ],
    "coverage_requirements": [
      "Minimum 80% coverage for branches, functions, lines, and statements"
    ],
    "test_patterns": [
      "Arrange-Act-Assert (AAA)",
      "Mocks for external dependencies",
      "Given-When-Then for behavioral tests"
    ],
    "mocking_approach": [
      "Jest mocks for external services and dependencies",
      "Mocks for clipboardy, NutJS, and environment variables",
      "Mock environment variables with jest"
    ]
  },
  "development_workflow": {
    "branch_strategy": ["GitHub Flow with feature, main, and hotfix branches"],
    "commit_conventions": ["Conventional Commits"],
    "pr_requirements": [
      "Mandatory code review",
      "Automated lint and test checks must pass",
      "Passing CI checks"
    ],
    "ci_cd_pipeline": [
      "Automated build, lint, test, and deploy via GitHub Actions",
      "Unit and integration tests",
      "Coverage reporting",
      "Automatic deployment to staging and production"
    ]
  },
  "commands": {
    "setup": ["npm install", "cp .env.example .env"],
    "install": ["npm install"],
    "dev": ["npm run dev", "tsc --watch"],
    "test": ["npm test", "npx jest --coverage"],
    "build": ["npm run build"],
    "lint": ["npm run lint", "eslint . --ext .ts,.tsx"],
    "format": ["npm run format", "prettier --write ."]
  },
  "security_constraints": {
    "authentication_method": [
      "API Key via header 'x-api-key'",
      "JWT (optional for future extension)"
    ],
    "authorization_rules": [
      "Access restricted to users with valid API key for all protected endpoints",
      "Role-based access control for sensitive routes",
      "401 and 403 errors for unauthorized access"
    ],
    "sensitive_data": [
      ".env files",
      "API keys must be protected and never exposed in logs or code",
      "Clipboard data and screenshots (base64) must be validated and handled securely",
      "Environment variables for sensitive configuration",
      "User input events (mouse, keyboard) treated as transient data"
    ],
    "security_headers": [
      "Content-Type: application/json",
      "Accept: text/event-stream for SSE",
      "Header 'x-api-key' required",
      "Content-Security-Policy",
      "X-Content-Type-Options: nosniff",
      "Cache-Control: no-cache",
      "Connection: keep-alive",
      "X-Accel-Buffering: no"
    ],
    "encryption_requirements": [
      "HTTPS required for secure transport",
      "TLS for communication",
      "API key must be transmitted only over secure channels",
      "JWT tokens must be encrypted if used"
    ]
  },
  "performance_requirements": {
    "response_time_limits": [
      "Low latency for real-time SSE events (<200ms for critical operations)",
      "Standard API responses in under 5000ms",
      "Screen capture and typing operations must respect configured timeouts",
      "Immediate response for invalid requests",
      "Streaming interval configurable (default 100ms)"
    ],
    "optimization_priorities": [
      "Low latency for real-time event streaming",
      "Efficient resource usage for SSE",
      "Memory usage control via buffer size and event age limits",
      "Fast and reliable execution of automation commands",
      "Performance optimized for production, human-readable logs in development"
    ],
    "caching_strategy": [
      "Circular buffer acts as temporary cache for events",
      "No persistent cache; focus on real-time operations",
      "Configuration loaded once and immutable"
    ],
    "scalability_considerations": [
      "Support for multiple simultaneous SSE connections",
      "Horizontal scalability via Fastify and Node.js clustering",
      "Configurable buffer and batch size for event processing",
      "Efficient listener management to avoid memory leaks",
      "Modular architecture for easy extension and scaling"
    ]
  },
  "error_handling": {
    "error_format": [
      "Standardized JSON with fields: success, error, code, and details",
      "Validation errors with descriptive messages via Zod",
      "CommandResult object with success boolean and error string",
      "Proper HTTP status codes for all error responses"
    ],
    "logging_strategy": [
      "Structured logging with Pino, configurable levels (info, debug, error)",
      "Logs stored in logs/ directory",
      "Development logs are human-readable; production logs are minimal",
      "Logger configured via environment variables"
    ],
    "monitoring_tools": [
      "PM2 for process monitoring and automatic restarts",
      "Custom logger integrated with the system",
      "EventDispatcher for event tracking",
      "Integration with external tools (e.g., Sentry, Prometheus) recommended"
    ],
    "error_recovery": [
      "Preventive validation and clear error responses for invalid input",
      "Fail-fast: process exits on invalid configuration",
      "Graceful shutdown to avoid request loss",
      "Automatic buffer reset and listener cleanup on errors",
      "Immediate rejection of unauthorized or invalid requests"
    ]
  },
  "dependencies_context": {
    "critical_dependencies": [
      "Fastify",
      "Jest",
      "ESLint",
      "Prettier",
      "TSyringe",
      "Zod",
      "NutJS",
      "clipboardy",
      "sharp",
      "nanoid",
      "dotenv",
      "pino",
      "ts-jest",
      "Node.js"
    ],
    "deprecated_packages": ["None"],
    "version_constraints": [
      "TypeScript >=5.0",
      "Node.js >=18",
      "ESLint 8.x",
      "Fastify 4.x",
      "Zod >=3.0.0",
      "clipboardy >=3.0.0",
      "tsyringe >=4.0.0",
      "Jest >=29",
      "JSON Schema Draft 7"
    ],
    "internal_packages": [
      "src/ as main internal package",
      "domain/interfaces",
      "domain/entities",
      "application/services",
      "infrastructure/adapters",
      "controllers",
      "middleware",
      "schemas",
      "types",
      "config"
    ]
  },
  "current_challenges": {
    "technical_debt": [
      "Lack of strict type checking in some legacy modules",
      "Need for more robust error handling and reconnection logic",
      "Documentation for new adapters and services could be improved",
      "Manual listener management could be abstracted further",
      "Replay of lost events not fully implemented",
      "Some modules lack comprehensive automated tests"
    ],
    "known_issues": [
      "SSE connections may be interrupted without automatic recovery",
      "Clipboardy dependency may cause compatibility issues on some systems",
      "Potential memory leaks if listeners are not properly removed",
      "Loss of events possible if buffer is full and pruning is inefficient",
      "Environment variable misconfiguration can cause startup failures",
      "Latency in streaming routes under high load"
    ],
    "performance_bottlenecks": [
      "Potential overhead with many simultaneous SSE connections",
      "Image capture and processing operations can be resource-intensive",
      "Buffer pruning may be costly with large event volumes",
      "Sequential delays in typing and mouse actions can impact responsiveness",
      "Streaming can increase CPU and memory usage under heavy load"
    ],
    "migration_status": [
      "Stable in production",
      "Migrated to TypeScript 5.x and Fastify 4.x",
      "No active migrations"
    ]
  },
  "team_preferences": {
    "code_review_focus": [
      "ESLint rule compliance",
      "Strict type safety (no any)",
      "Proper promise and async/await handling",
      "Security validation and test coverage",
      "Separation of concerns and modularity",
      "Clear and consistent logging",
      "Error handling and API key security",
      "Schema validation and error clarity",
      "Consistent naming conventions",
      "Validation of environment variables and limits"
    ],
    "documentation_requirements": [
      "Clear documentation of endpoints and parameters via JSDoc and README",
      "JSDoc for all public methods, interfaces, and schemas",
      "Document environment variables and their default values",
      "Update know-how.txt after major changes"
    ],
    "communication_style": [
      "Clear and concise comments",
      "Use of English for technical terms",
      "Objective and informative PR descriptions",
      "Portuguese for context and explanations when needed"
    ],
    "decision_log": [
      "Adoption of strict rules for promises and any types for safety",
      "API key for authentication, SSE for real-time streaming",
      "Clean Architecture for maintainability",
      "Fastify and tsyringe for modularity and performance",
      "Zod for centralized and robust validation",
      "Singletons for shared state (EventDispatcher, EventBuffer)",
      "Fail-fast to avoid running with invalid configuration",
      "dotenv for centralized environment configuration",
      "Factory Methods for action creation",
      "Adapter Pattern to decouple NutJS",
      "Base64 for image transport",
      "Mocks for external dependencies in tests"
    ]
  },
  "api_specifications": {
    "api_style": ["RESTful API with versioned endpoints (api/v1)", "REST with streaming SSE"],
    "versioning_strategy": ["Versioning via URL (e.g., /api/v1)"],
    "response_formats": [
      "JSON for standard responses",
      "text/event-stream for SSE",
      "CommandResult with success, data, and error fields",
      "Base64 encoded images for screen capture"
    ],
    "rate_limiting": [
      "Configurable maxRate for event streaming",
      "Recommended implementation via Fastify plugins"
    ]
  },
  "deployment_context": {
    "environments": [
      "development (http://localhost:3000)",
      "staging (https://staging.automation.example.com)",
      "production (https://automation.example.com)",
      "test"
    ],
    "deployment_method": [
      "PM2 process manager",
      "Docker containerization",
      "CI/CD via GitHub Actions",
      "Node.js runtime"
    ],
    "environment_variables": [
      "NODE_ENV",
      "PORT",
      "HOST",
      "LOG_LEVEL",
      "API_KEY",
      "MOUSE_SPEED",
      "SCREEN_CONFIDENCE",
      "RECORDER_INCLUDE_SCREENSHOT",
      "RECORDER_MOVE_INTERVAL_MS",
      "RECORDER_MAX_SCREENSHOT_SIZE",
      "INPUT_EVENT_BUFFER",
      "INPUT_EVENT_RATE",
      "INPUT_EVENT_HEARTBEAT",
      "INPUT_EVENT_MAX_AGE",
      "KEYBOARD_DEFAULT_MODE",
      "KEYBOARD_MAX_TEXT_LENGTH",
      "KEYBOARD_DEFAULT_DELAY_PER_CHAR",
      "KEYBOARD_MAX_DELAY",
      "KEYBOARD_BATCH_SIZE"
    ],
    "infrastructure_constraints": [
      "Support for persistent SSE connections",
      "Accessibility permissions required on macOS",
      "DISPLAY variable required on Linux",
      "Memory limit for buffers and streaming",
      "Support for Windows, Linux, and macOS",
      "Proper configuration of environment variables required",
      "Access to input devices and desktop for automation",
      "Requires local API server running on port 3000"
    ]
  },
  "lastCommitHash": "4675b71c1d205717aa613152608745e6222967bc"
}

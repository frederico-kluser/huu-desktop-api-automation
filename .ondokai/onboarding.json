{
  "project_metadata": {
    "name": "NutJS Desktop Automation API â€“ Web/Mobile/Desktop automation, input event streaming, LLM integration, and OCR services",
    "domain": [
      "Web/Mobile/Desktop Automation",
      "Input Event Streaming",
      "AI Integration",
      "Clipboard Management",
      "Screen Capture",
      "Keyboard and Mouse Control",
      "Robotic Process Automation (RPA)",
      "Computer Vision",
      "Optical Character Recognition (OCR)",
      "Large Language Models (LLM)",
      "API Development",
      "Software Testing",
      "Backend",
      "Frontend",
      "Security",
      "DevOps"
    ],
    "current_phase": [
      "Development",
      "Production",
      "Maintenance",
      "Stable",
      "Testing Automation",
      "MVP"
    ],
    "critical_business_rules": [
      "API key authentication required for sensitive endpoints",
      "Strict input validation for all parameters and payloads",
      "Clipboard content must not exceed 1 MB",
      "Text input must be non-empty and free of control characters",
      "Key combinations must use allowed modifiers and have 1-5 keys",
      "Timing values must be non-negative and not exceed 300000ms",
      "Mouse and screen coordinates must be within valid screen bounds",
      "Consistent error response format with proper HTTP status codes",
      "No sensitive error details exposed in production",
      "Singleton services must be unique and globally accessible",
      "Rate limiting to prevent overload (max 50000 events/s)",
      "Buffer size must be between 1 and 100000",
      "Heartbeat interval must be between 1000 and 300000 ms",
      "Max event age must be between 1000 and 3600000 ms",
      "Batch requests limited to max 10 images",
      "Image size must not exceed 14MB encoded (approx. 10MB raw)",
      "OCR processing must respect configured languages and modes",
      "Timeouts must be enforced to avoid resource exhaustion",
      "Environment variables must be loaded safely and set for each environment",
      "API versioning must be respected",
      "Coverage minimum 80% for critical modules",
      "No leakage of sensitive data (API keys, clipboard, user input)",
      "Consistent logging for audit and debugging",
      "Graceful shutdown to avoid data loss",
      "Strict TypeScript typing and linting enforced"
    ]
  },
  "technical_stack": {
    "primary_language": ["TypeScript", "JavaScript (ES2020+)", "Node.js >=18"],
    "frameworks": [
      "Fastify 4.x",
      "React 18.x",
      "NutJS",
      "Zod 3.x",
      "TSyringe 4.x",
      "Webpack 5.x",
      "Jest 29.x",
      "Sharp 0.32.x",
      "tesseract.js 4.x",
      "React-Bootstrap 2.x",
      "LangChain"
    ],
    "databases": ["None", "PostgreSQL 15", "Redis 7.0", "localStorage (frontend only)"],
    "external_services": [
      "OpenAI API",
      "DeepSeek API",
      "NutJS",
      "Tesseract.js (OCR)",
      "clipboardy",
      "dotenv",
      "pino",
      "nanoid",
      "Server-Sent Events (SSE)",
      "LangChain LLM API",
      "Sharp",
      "Custom Logger",
      "GitHub (documentation)",
      "Bootstrap CDN",
      "Font Awesome CDN"
    ],
    "package_manager": ["npm", "yarn"]
  },
  "architecture_patterns": {
    "design_pattern": [
      "Clean Architecture",
      "Dependency Injection",
      "Modular Architecture",
      "RESTful API",
      "Event-driven (SSE)",
      "Singleton",
      "Factory Pattern",
      "Adapter Pattern",
      "Observer Pattern",
      "DTO Pattern",
      "Schema Validation",
      "Service Layer",
      "Component-Based Architecture (frontend)",
      "SPA (Single Page Application)",
      "Cache Aside Pattern"
    ],
    "folder_structure": [
      "src/ (backend source code)",
      "web/ (frontend source code)",
      "dist/ (build output)",
      "node_modules/ (dependencies)",
      "tests/ (unit and integration tests)",
      "config/ (configuration and logger)",
      "domain/ (entities and interfaces)",
      "application/services/ (business logic and DTOs)",
      "infrastructure/adapters/ (external integrations)",
      "interface/controllers/ (API controllers and middleware)",
      "schemas/ (validation schemas)",
      "public/ (static assets)",
      "components/ (React UI components)",
      "types/ (TypeScript type definitions)"
    ],
    "naming_conventions": [
      "PascalCase for classes, interfaces, and types",
      "camelCase for variables, functions, and properties",
      "UPPER_SNAKE_CASE for environment variables and constants",
      "kebab-case for filenames and configuration files",
      "Suffix 'Service' for service classes",
      "Suffix 'Controller' for controllers",
      "Suffix 'Adapter' for adapters",
      "Prefix 'I' for interfaces",
      "DTOs with 'Request'/'Response' suffix",
      "Files with .ts or .tsx extensions"
    ],
    "module_boundaries": [
      "Clear separation between backend and frontend",
      "Domain does not depend on Application or Infrastructure",
      "Application depends on Domain",
      "Infrastructure depends on Application",
      "Interface depends on Application and Infrastructure",
      "Controllers depend on services via dependency injection",
      "Validation schemas isolated from business logic",
      "Types and DTOs isolated from services and entities",
      "Config and logger isolated in dedicated modules",
      "Mocks isolated in tests",
      "Single responsibility per module"
    ]
  },
  "code_standards": {
    "style_guide": ["Airbnb JavaScript/TypeScript Style Guide", "ESLint Recommended", "Prettier"],
    "linting_rules": [
      "ESLint with @typescript-eslint plugin",
      "No explicit any",
      "Strict typing",
      "No unused variables (except args prefixed with _)",
      "No async-promise-executor",
      "No floating promises",
      "No var",
      "Prefer const",
      "plugin:react/recommended",
      "plugin:react-hooks/recommended"
    ],
    "formatting": [
      "Prettier with default config",
      "semi: true",
      "singleQuote: true",
      "trailingComma: all",
      "tabWidth: 2",
      "printWidth: 100",
      "Integration with ESLint"
    ],
    "documentation_style": [
      "JSDoc for all public methods, classes, and interfaces",
      "Inline comments in Portuguese for context",
      "JSDoc for schemas and DTOs"
    ],
    "type_checking": [
      "Strict TypeScript (strict mode enabled)",
      "No implicit any",
      "StrictNullChecks",
      "TypeScript typings for all payloads and responses",
      "Zod for runtime validation"
    ]
  },
  "testing_strategy": {
    "test_framework": ["Jest 29.x", "React Testing Library", "ts-jest"],
    "test_structure": [
      "tests/ for unit and integration tests",
      "__tests__ folders alongside source files",
      "tests/unit for services, schemas, and utils",
      "tests/integration for API and event flows",
      "Mocks for external dependencies"
    ],
    "coverage_requirements": [
      "Minimum 80% coverage for critical modules",
      "branches >= 80%",
      "functions >= 80%",
      "lines >= 80%",
      "statements >= 80%"
    ],
    "test_patterns": [
      "AAA (Arrange, Act, Assert)",
      "Given-When-Then",
      "Mocks for external dependencies",
      "Snapshot testing for UI",
      "**/__tests__/**/*.test.ts",
      "**/tests/**/*.test.ts",
      "**/tests/**/*.spec.ts"
    ],
    "mocking_approach": [
      "Jest mocks and spies",
      "jest.mock for external modules",
      "Mocks for clipboardy, pino, nanoid, and adapters",
      "Mock environment variables",
      "Mock Fastify request and reply",
      "Mock global for localStorage",
      "Mocks for services and controllers",
      "Mocks for LLM and OCR responses"
    ]
  },
  "development_workflow": {
    "branch_strategy": ["GitHub Flow", "git Flow"],
    "commit_conventions": ["Conventional Commits"],
    "pr_requirements": [
      "Code review mandatory",
      "Passing CI checks",
      "Lint and test checks required",
      "At least one reviewer approval"
    ],
    "ci_cd_pipeline": [
      "Build, lint, test, and deploy automated via GitHub Actions",
      "Unit tests",
      "Linting",
      "Deploy"
    ]
  },
  "commands": {
    "setup": ["npm install", "cp .env.example .env"],
    "install": ["npm ci"],
    "dev": [
      "npm run dev",
      "npm run dev:web",
      "npm run dev:full",
      "node scripts/testGlobalInputCapture.js",
      "webpack serve --config webpack.config.js"
    ],
    "test": [
      "npm test",
      "npm run test:unit",
      "npm run test:integration",
      "npm run test:coverage",
      "npm test -- --coverage"
    ],
    "build": [
      "npm run build",
      "npm run build:web",
      "npm run build:prod",
      "tsc --build",
      "webpack --config webpack.config.js"
    ],
    "lint": ["npm run lint", "eslint . --ext .ts", "npm run lint:fix"],
    "format": ["npm run format", "prettier --write .", "npm run format:check"]
  },
  "security_constraints": {
    "authentication_method": [
      "API key via HTTP header 'x-api-key'",
      "JWT (for external services)",
      "API keys for external services"
    ],
    "authorization_rules": [
      "Role-based Access Control (RBAC)",
      "Access restricted to users with valid API key",
      "No sensitive endpoints without authentication",
      "macOS Accessibility permissions required for input capture"
    ],
    "sensitive_data": [
      "API keys for OpenAI and DeepSeek",
      "Clipboard content",
      "User input data (mouse, keyboard, screen capture)",
      "Environment variables",
      "Base64 image data",
      "LLM prompts and responses",
      "Tokens and credentials",
      "No sensitive data exposed in logs or responses"
    ],
    "security_headers": [
      "Content-Security-Policy",
      "X-Frame-Options",
      "Strict-Transport-Security",
      "Content-type: application/json",
      "x-api-key header required",
      "Cache-Control: no-cache",
      "X-Content-type-Options: nosniff"
    ],
    "encryption_requirements": [
      "TLS for all network communication",
      "HTTPS required for external API calls",
      "Environment variables must not expose sensitive data",
      "Base64 images handled in memory only",
      "No sensitive data stored unencrypted"
    ]
  },
  "performance_requirements": {
    "response_time_limits": [
      "API responses < 200ms for standard operations",
      "Screen capture and OCR responses < 5000ms",
      "Real-time event streaming with minimal latency",
      "Timeouts enforced for LLM and OCR requests",
      "Batch processing limited to 10 images per request"
    ],
    "optimization_priorities": [
      "Low latency for input and automation operations",
      "Efficient memory usage for event buffers and image processing",
      "Fast build and test cycles",
      "Validation efficiency to minimize request overhead",
      "Performance optimized for production",
      "Responsiveness and UI performance"
    ],
    "caching_strategy": [
      "Redis cache with configurable TTL for static data",
      "In-memory buffer for recent events",
      "Cache LRU for OCR results",
      "Cache localStorage with TTL for frontend status",
      "No cache for dynamic input operations"
    ],
    "scalability_considerations": [
      "Horizontal scalability via Fastify and Node.js cluster",
      "Support for multiple concurrent requests and SSE clients",
      "Batch processing and worker pools for OCR",
      "Modular architecture for service scaling",
      "Singletons for global services",
      "Configurable buffer and batch sizes"
    ]
  },
  "error_handling": {
    "error_format": [
      "Standard JSON with fields: success, error, code, details",
      "Zod validation error format",
      "CommandResult with success, data, and error",
      "Consistent error response for all APIs"
    ],
    "logging_strategy": [
      "Structured logging with pino",
      "Log level configurable via LOG_LEVEL",
      "Separate logs for info, warn, error, and debug",
      "Sensitive data masked in logs",
      "Console.error for critical errors"
    ],
    "monitoring_tools": [
      "Sentry for production error monitoring",
      "PM2 internal monitoring",
      "Prometheus/Grafana (optional integration)",
      "Custom logger with external integration possible"
    ],
    "error_recovery": [
      "Automatic retries for transient failures",
      "Graceful shutdown on critical errors",
      "Fallbacks for parsing and external service errors",
      "Strict input validation to prevent invalid states",
      "Centralized error handling middleware",
      "Timeouts and aborts handled gracefully"
    ]
  },
  "dependencies_context": {
    "critical_dependencies": [
      "OpenAI API",
      "DeepSeek API",
      "TypeScript",
      "Fastify",
      "React",
      "NutJS",
      "TSyringe",
      "Zod",
      "Jest",
      "Webpack",
      "pino",
      "clipboardy",
      "nanoid",
      "tesseract.js",
      "Sharp",
      "dotenv"
    ],
    "deprecated_packages": ["robotjs (deprecated, replaced by NutJS)"],
    "version_constraints": [
      "Node.js >=18",
      "TypeScript >=5.0",
      "Fastify 4.x",
      "React 18.x",
      "Zod 3.x",
      "Jest 29.x",
      "Sharp 0.32.x",
      "tesseract.js 4.x",
      "clipboardy >=3.0.0",
      "nanoid >=4.0.0"
    ],
    "internal_packages": [
      "@nut-tree-fork/nut-js",
      "domain/interfaces",
      "domain/entities",
      "application/services",
      "infrastructure/adapters",
      "interface/controllers",
      "config",
      "types",
      "dto",
      "schemas"
    ]
  },
  "current_challenges": {
    "technical_debt": [
      "Refactoring legacy JavaScript modules to TypeScript",
      "Improve error handling and logging granularity",
      "Expand test coverage for edge cases",
      "Enhance validation for environment variables",
      "Document new endpoints and services",
      "Standardize custom error classes",
      "Improve fallback and error handling in complex parsing",
      "Migrate legacy output format to dynamic schema",
      "Remove hardcoded API keys from scripts"
    ],
    "known_issues": [
      "Inconsistencies in local development environments",
      "macOS Accessibility permissions may block event capture",
      "Possible event loss on buffer overflow",
      "Batch size and image size limits may reject large requests",
      "Dependency on local API for some tests",
      "Potential platform compatibility issues with uiohook-napi",
      "Timeouts may cause failures on complex OCR images",
      "Possible exposure of API key in frontend if not handled properly"
    ],
    "performance_bottlenecks": [
      "Image processing and OCR can be resource intensive",
      "Sequential typing with delays may cause slowdowns for long texts",
      "Streaming SSE may generate overhead with many clients",
      "Parsing and validation of large schemas may impact latency",
      "OCR processing time varies with image complexity and mode"
    ],
    "migration_status": [
      "Migration to TypeScript completed",
      "Migration to Fastify 4.x completed",
      "Ongoing improvements and refactoring",
      "Stable in production"
    ]
  },
  "team_preferences": {
    "code_review_focus": [
      "Test coverage",
      "Code quality",
      "Linting and style compliance",
      "Strict TypeScript typing",
      "Security and input validation",
      "Consistent error handling",
      "Separation of concerns",
      "Modularity and dependency injection",
      "Logging quality",
      "Documentation clarity"
    ],
    "documentation_requirements": [
      "Clear documentation via JSDoc for all public methods and interfaces",
      "Document all endpoints and DTOs",
      "Update README and know-how.txt after major changes",
      "Inline comments in Portuguese for context"
    ],
    "communication_style": [
      "Objective and technical comments",
      "Portuguese for context, English for technical terms",
      "Clear and concise PR descriptions",
      "Use of Markdown for technical discussions"
    ],
    "decision_log": [
      "Adoption of Clean Architecture and modular separation",
      "Use of Fastify for high performance",
      "TypeScript and Zod for strict typing and validation",
      "API key for authentication",
      "Singleton pattern for shared services",
      "Use of pino for structured logging",
      "React and React-Bootstrap for frontend",
      "GitHub Actions for CI/CD",
      "Separation of backend and frontend codebases",
      "Use of enums for LLM models and error codes",
      "LocalStorage cache for frontend status",
      "Batch size and image size limits for performance and security"
    ]
  },
  "api_specifications": {
    "api_style": ["RESTful", "REST with SSE for streaming", "Internal event dispatching API"],
    "versioning_strategy": [
      "URI versioning (e.g., /api/v1)",
      "Version in URL (/api/v1/llm, /api/v1/status)"
    ],
    "response_formats": [
      "application/json",
      "Standard JSON with fields: success, data, error",
      "Base64 encoded images",
      "text/event-stream for SSE",
      "Zod validation error format"
    ],
    "rate_limiting": [
      "Configurable via environment variable (maxRate)",
      "Default 5000 events per second",
      "Batch requests limited to 10 images"
    ]
  },
  "deployment_context": {
    "environments": [
      "development",
      "staging",
      "production",
      "test",
      "localhost (http://localhost:3000)"
    ],
    "deployment_method": [
      "Docker container",
      "PM2 process manager",
      "Node.js runtime",
      "CI/CD pipeline via GitHub Actions",
      "Webpack for frontend bundling"
    ],
    "environment_variables": [
      "NODE_ENV",
      "PORT",
      "LOG_LEVEL",
      "API_KEY",
      "OPENAI_API_KEY",
      "DEEPSEEK_API_KEY",
      "INPUT_EVENT_BUFFER",
      "INPUT_EVENT_RATE",
      "KEYBOARD_DEFAULT_MODE",
      "KEYBOARD_MAX_TEXT_LENGTH",
      "KEYBOARD_DEFAULT_DELAY_PER_CHAR",
      "KEYBOARD_MAX_DELAY",
      "KEYBOARD_BATCH_SIZE",
      "MOUSE_MIN_DUR",
      "MOUSE_MAX_DUR",
      "MOUSE_DEFAULT_SMOOTH",
      "MOUSE_SAMPLE_RATE",
      "MOUSE_STREAM_INTERVAL",
      "SCREEN_CONFIDENCE",
      "OCR_WORKER_COUNT",
      "OCR_MAX_IMAGE_SIZE_MB",
      "OCR_TIMEOUT_MS",
      "OCR_LANGUAGES",
      "CACHE_TTL",
      "ENABLE_CACHE",
      "REACT_APP_API_URL"
    ],
    "infrastructure_constraints": [
      "Memory limits for Docker/Kubernetes pods",
      "macOS Accessibility permissions required for input capture",
      "Firewall rules for API access",
      "Node.js >=18 required",
      "Permissions for desktop automation",
      "Batch size and image size limits for OCR",
      "Persistent SSE connections require proper proxy configuration",
      "Environment variables must be set correctly",
      "Local API must be running for some features",
      "High availability and low latency required"
    ]
  },
  "lastCommitHash": "377eecaa0ba30a8d95f2f6b53ec52e380e01be8f"
}

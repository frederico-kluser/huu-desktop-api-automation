#!/usr/bin/env node

const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

const assetsDir = path.join(__dirname, '..', 'assets');

// Ensure assets directory exists
if (!fs.existsSync(assetsDir)) {
  fs.mkdirSync(assetsDir, { recursive: true });
}

// Create a simple icon with "HUU" text
async function generateBaseIcon() {
  const size = 1024;
  const svg = `
    <svg width="${size}" height="${size}" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <linearGradient id="bg" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
          <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
        </linearGradient>
      </defs>
      <rect width="${size}" height="${size}" rx="180" fill="url(#bg)"/>
      <text x="50%" y="55%" font-family="Arial, sans-serif" font-size="380" font-weight="bold" fill="white" text-anchor="middle">HUU</text>
      <text x="50%" y="75%" font-family="Arial, sans-serif" font-size="120" fill="white" text-anchor="middle" opacity="0.9">Desktop</text>
    </svg>
  `;

  return sharp(Buffer.from(svg))
    .resize(size, size)
    .png()
    .toBuffer();
}

async function generateIcons() {
  console.log('üé® Generating application icons...');

  try {
    const baseIcon = await generateBaseIcon();

    // Generate PNG icon (512x512 for Linux/General use)
    await sharp(baseIcon)
      .resize(512, 512)
      .png()
      .toFile(path.join(assetsDir, 'icon.png'));
    console.log('‚úÖ Generated icon.png (512x512)');

    // Generate tray icon (smaller, 32x32)
    await sharp(baseIcon)
      .resize(32, 32)
      .png()
      .toFile(path.join(assetsDir, 'tray-icon.png'));
    console.log('‚úÖ Generated tray-icon.png (32x32)');

    // Generate ICO for Windows (multiple sizes)
    // Note: For proper ICO generation, we'll create multiple PNG sizes
    // Windows ICO format requires special handling
    const icoSizes = [16, 32, 48, 256];
    for (const size of icoSizes) {
      await sharp(baseIcon)
        .resize(size, size)
        .png()
        .toFile(path.join(assetsDir, `icon-${size}.png`));
    }
    console.log('‚úÖ Generated Windows icon sizes (use electron-builder to create .ico)');

    // For macOS ICNS, we need multiple sizes
    // electron-builder will handle ICNS generation from PNG
    const macSizes = [16, 32, 64, 128, 256, 512, 1024];
    for (const size of macSizes) {
      await sharp(baseIcon)
        .resize(size, size)
        .png()
        .toFile(path.join(assetsDir, `icon-${size}x${size}.png`));
    }
    console.log('‚úÖ Generated macOS icon sizes (use electron-builder to create .icns)');

    // Create a simple placeholder for .ico and .icns
    // These will be properly generated during build
    await sharp(baseIcon)
      .resize(256, 256)
      .png()
      .toFile(path.join(assetsDir, 'icon.ico'));
    
    await sharp(baseIcon)
      .resize(512, 512)
      .png()
      .toFile(path.join(assetsDir, 'icon.icns'));

    console.log('‚ú® Icon generation complete!');
    console.log('Note: For production, .ico and .icns files will be generated by electron-builder');
  } catch (error) {
    console.error('‚ùå Error generating icons:', error);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  generateIcons();
}

module.exports = { generateIcons };
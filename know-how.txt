## [2025-07-05] - Arquivo DTO com Zod schemas
**Problema**: ESM syntax is not allowed in a CommonJS module when 'verbatimModuleSyntax' is enabled
**Contexto**: Testes para arquivo DTO que exporta schemas Zod
**Solu√ß√£o**: Usar require() em vez de import para contornar restri√ß√µes do verbatimModuleSyntax nos testes
**Quando aplicar**: Ao testar arquivos TypeScript com imports ESM em projetos com verbatimModuleSyntax habilitado
---

## [2025-07-05] - Estrutura de diret√≥rios de teste
**Problema**: Jest n√£o encontrava os testes quando colocados em src/application/dto/__tests__/
**Contexto**: Projeto com configura√ß√£o espec√≠fica de diret√≥rios de teste
**Solu√ß√£o**: Colocar testes em tests/unit/[estrutura-espelhada] seguindo o padr√£o do projeto
**Quando aplicar**: Sempre verificar o testMatch no jest.config.js antes de criar novos testes
---

## [2025-07-05] - Coverage de schemas Zod
**Problema**: Necessidade de testar todos os branches de valida√ß√£o dos schemas
**Contexto**: Schemas Zod com valida√ß√µes complexas (min, max, enum, optional, default)
**Solu√ß√£o**: Criar casos de teste para valores v√°lidos, inv√°lidos em cada limite, e edge cases
**Quando aplicar**: Ao testar schemas de valida√ß√£o, cobrir todos os cen√°rios de sucesso e falha
---

## [2025-07-05] - Configura√ß√£o TypeScript para testes
**Problema**: Incompatibilidade entre configura√ß√£o do projeto e necessidades dos testes
**Contexto**: Projeto usa verbatimModuleSyntax mas testes precisam de flexibilidade
**Solu√ß√£o**: Usar tsconfig.test.json espec√≠fico para testes com verbatimModuleSyntax desabilitado
**Quando aplicar**: Quando h√° conflitos entre configura√ß√µes TypeScript de produ√ß√£o e teste
---

## [2025-07-05] - Testes para interfaces TypeScript vazias (marcadoras)
**Problema**: Interfaces vazias/marcadoras n√£o geram c√≥digo execut√°vel, resultando em 0% coverage
**Contexto**: Interface IAutomationService usada apenas como marcador de tipo
**Solu√ß√£o**: Criar testes que verificam: 1) Importa√ß√£o da interface, 2) Implementa√ß√µes da interface, 3) M√∫ltiplas implementa√ß√µes, 4) Uso como constraint de tipo
**Quando aplicar**: Ao testar interfaces vazias ou marcadoras, focar em verificar que o tipo pode ser usado corretamente em vez de coverage de c√≥digo
---

## [2025-07-05] - Mock de m√≥dulos ESM puros como clipboardy
**Problema**: Jest n√£o consegue importar m√≥dulos ESM puros como clipboardy, resultando em "Cannot use import statement outside a module"
**Contexto**: Servi√ßo que depende de biblioteca ESM pura (clipboardy) para funcionalidades de clipboard
**Solu√ß√£o**: Adicionar mock global no arquivo tests/setup.ts com todas as fun√ß√µes necess√°rias mockadas, evitando que o Jest tente importar o m√≥dulo real
**Quando aplicar**: Ao testar c√≥digo que depende de bibliotecas ESM puras que n√£o podem ser transformadas pelo Jest
---

## [2025-07-05] - Testando arquivos exclu√≠dos do coverage (como index.ts)
**Problema**: Arquivo index.ts est√° exclu√≠do do coverage mas ainda precisa de testes para garantir estrutura
**Contexto**: Arquivo principal da aplica√ß√£o (index.ts) com servidor Fastify, exclu√≠do em jest.config.js
**Solu√ß√£o**: Criar teste placeholder m√≠nimo que valida a estrutura de testes sem tentar testar o c√≥digo real, evitando complexidade desnecess√°ria de mocks ESM
**Quando aplicar**: Quando um arquivo est√° explicitamente exclu√≠do do coverage mas voc√™ quer manter a estrutura de testes consistente
---

## [2025-07-05] - Testando servi√ßos com buffer circular
**Problema**: Necessidade de testar comportamento de buffer circular com overflow e edge cases
**Contexto**: Servi√ßo EventBuffer que implementa buffer circular para armazenar eventos com tamanho m√°ximo
**Solu√ß√£o**: Criar testes que cobrem: 1) Overflow do buffer adicionando mais elementos que a capacidade, 2) Ordem correta ap√≥s wrap-around, 3) C√°lculos de √≠ndices circulares, 4) Comportamento com buffer parcialmente cheio vs completamente cheio
**Quando aplicar**: Ao testar estruturas de dados circulares, sempre verificar comportamento nos limites e ap√≥s wrap-around
---

## [2025-07-05] - Testando c√≥digo que usa Date.now() e timers
**Problema**: Testes que dependem de tempo real podem ser inst√°veis ou lentos
**Contexto**: M√©todos como pruneOldEvents que filtram eventos por idade baseada em timestamps
**Solu√ß√£o**: Usar jest.useFakeTimers() e jest.setSystemTime() para controlar o tempo nos testes, permitindo simular passagem de tempo com jest.advanceTimersByTime(). Sempre limpar com jest.useRealTimers() no afterEach
**Quando aplicar**: Quando testar funcionalidades que dependem de timestamps, delays ou timeouts
---

## [2025-07-05] - Tratamento de parseInt com valores inv√°lidos
**Problema**: parseInt retorna NaN para strings n√£o num√©ricas, causando erro em new Array(NaN)
**Contexto**: Constructor do EventBuffer parseando INPUT_EVENT_BUFFER do process.env
**Solu√ß√£o**: Em testes, verificar que o erro √© lan√ßado com expect(() => new Class()).toThrow() ao inv√©s de tentar criar a inst√¢ncia. No c√≥digo real, adicionar valida√ß√£o para usar valor default quando parseInt retornar NaN
**Quando aplicar**: Ao testar parsing de valores de environment variables ou entrada do usu√°rio que podem ser inv√°lidos
---

## [2025-07-05] - Mock de bibliotecas externas complexas como @nut-tree-fork/nut-js
**Problema**: Necessidade de mockar biblioteca externa com tipos e estruturas complexas para testes unit√°rios
**Contexto**: Adapter que usa @nut-tree-fork/nut-js para controle de teclado com m√∫ltiplas constantes de teclas
**Solu√ß√£o**: Criar mock completo no in√≠cio do arquivo de teste incluindo todas as constantes (Key enum) e fun√ß√µes necess√°rias, antes dos imports, e usar require() em vez de import para o arquivo testado
**Quando aplicar**: Ao testar adaptadores ou servi√ßos que dependem de bibliotecas externas complexas com muitas constantes ou enums
---

## [2025-07-05] - Testando setTimeout com Jest
**Problema**: Jest n√£o consegue espiar a fun√ß√£o global setTimeout diretamente com expect(setTimeout)
**Contexto**: Fun√ß√£o delay() que usa setTimeout internamente precisava ser testada
**Solu√ß√£o**: Usar jest.spyOn(global, 'setTimeout') dentro do beforeEach ap√≥s jest.useFakeTimers(), e restaurar o spy no afterEach
**Quando aplicar**: Sempre que precisar verificar chamadas a fun√ß√µes globais do JavaScript como setTimeout, setInterval, etc.
---

## [2025-07-05] - Coverage de mapeamentos extensos de constantes
**Problema**: Fun√ß√µes com grandes objetos de mapeamento (como keyMap) precisam testar todas as possibilidades para 100% coverage
**Contexto**: Adapter de teclado com mapeamento de strings para teclas do NutJS
**Solu√ß√£o**: Usar test.each() com array de todos os valores poss√≠veis para testar cada mapeamento individualmente de forma concisa
**Quando aplicar**: Quando houver switch cases ou objetos de mapeamento com muitas op√ß√µes que precisam ser testadas para coverage completo
---

## [2025-07-05] - Mock de setTimeout para testes ass√≠ncronos com delays
**Problema**: Testes com jest.useFakeTimers() causavam timeouts ao testar c√≥digo com setTimeout e promises ass√≠ncronas
**Contexto**: Adapter de mouse com m√©todo move() que usa setTimeout para criar delays entre movimentos interpolados
**Solu√ß√£o**: Em vez de usar jest.useFakeTimers(), mockar setTimeout diretamente com jest.fn() que executa o callback imediatamente, permitindo que as promises resolvam sem timeouts
**Quando aplicar**: Quando testar c√≥digo ass√≠ncrono que usa setTimeout dentro de promises e jest.useFakeTimers() causa problemas de timeout
---

## [2025-07-05] - Mock de setImmediate para testes s√≠ncronos
**Problema**: Testes com setImmediate causavam timeouts ao tentar executar processamento ass√≠ncrono de filas
**Contexto**: EventDispatcher que usa setImmediate para processar fila de eventos de forma n√£o-bloqueante
**Solu√ß√£o**: Mockar global.setImmediate = ((fn: any) => fn()) as any para executar callbacks de forma s√≠ncrona durante os testes, evitando timeouts e simplificando a l√≥gica de teste
**Quando aplicar**: Ao testar c√≥digo que usa setImmediate para processamento ass√≠ncrono n√£o-bloqueante, especialmente quando promises e async/await causam timeouts
---

## [2025-07-05] - Testando servi√ßos com estrat√©gias de execu√ß√£o (Strategy Pattern)
**Problema**: Necessidade de testar servi√ßos que implementam padr√£o Strategy com m√∫ltiplas implementa√ß√µes de uma mesma interface
**Contexto**: KeyboardService que usa diferentes estrat√©gias de digita√ß√£o (InstantTypeStrategy, PerCharTypeStrategy, TotalTimeTypeStrategy)
**Solu√ß√£o**: Testar cada modo/estrat√©gia separadamente, cobrindo: 1) Comportamento espec√≠fico de cada estrat√©gia, 2) Casos limite como string vazia ou caractere √∫nico, 3) Comportamento com e sem depend√™ncias opcionais (event dispatcher), 4) Valida√ß√µes de entrada espec√≠ficas de cada modo
**Quando aplicar**: Ao testar servi√ßos que implementam Strategy Pattern, garantir coverage de todas as estrat√©gias e seus casos espec√≠ficos
---

## [2025-07-05] - Coverage de c√≥digo com caracteres Unicode e sanitiza√ß√£o
**Problema**: Necessidade de testar processamento correto de caracteres Unicode e sanitiza√ß√£o de caracteres de controle
**Contexto**: Servi√ßo de teclado que precisa lidar com emojis, caracteres especiais e remover caracteres de controle perigosos
**Solu√ß√£o**: Criar testes espec√≠ficos com: 1) Strings contendo emojis e caracteres Unicode (üëãüåç), 2) Caracteres de controle que devem ser removidos (\x00-\x08), 3) Caracteres permitidos como \n e \t, 4) Usar Array.from() para contar caracteres corretamente
**Quando aplicar**: Ao testar c√≥digo que processa entrada de texto do usu√°rio, especialmente quando h√° sanitiza√ß√£o e suporte a Unicode
---

## [2025-07-05] - Testando adaptadores que herdam de classes base
**Problema**: Ao testar uma classe que estende outra, o constructor da classe pai pode ter depend√™ncias externas n√£o mockadas
**Contexto**: RecorderMouseAdapter que estende NutJSMouseAdapter, onde a classe pai configura mouse.config.mouseSpeed no constructor
**Solu√ß√£o**: Mockar completamente a biblioteca externa (@nut-tree-fork/nut-js) incluindo todas as propriedades aninhadas que a classe pai acessa (ex: mouse.config.mouseSpeed), e tamb√©m mockar environment.js que fornece valores de configura√ß√£o
**Quando aplicar**: Ao testar classes que herdam de outras classes com depend√™ncias externas no constructor, sempre verificar o que a classe pai precisa e incluir no mock
---

## [2025-07-05] - Testando controllers Fastify com rotas e SSE
**Problema**: Necessidade de testar controller que registra rotas Fastify e implementa Server-Sent Events (SSE)
**Contexto**: AutomationController que registra rotas REST e um endpoint de streaming SSE para posi√ß√£o do mouse
**Solu√ß√£o**: Mockar Fastify instance com post/get methods, mockar request/reply com raw properties para SSE, mockar setInterval/clearInterval globalmente, testar eventos de close/error separadamente
**Quando aplicar**: Ao testar controllers que registram rotas no Fastify e especialmente quando h√° endpoints SSE com streaming de dados
---

## [2025-07-05] - Mock de setInterval com TypeScript strict
**Problema**: Erro TS2322 ao mockar global.setInterval - tipos incompat√≠veis devido ao par√¢metro timeout opcional
**Contexto**: Teste de controller SSE que usa setInterval para heartbeat, com TypeScript strict mode
**Solu√ß√£o**: Adicionar par√¢metro opcional ms?: number no mock e usar type assertion "as any" no final: global.setInterval = jest.fn((fn: any, ms?: number) => { return 123 as any; }) as any;
**Quando aplicar**: Quando mockar fun√ß√µes globais do JavaScript que t√™m par√¢metros opcionais e o TypeScript reclamar de incompatibilidade de tipos
---

## [2025-07-05] - Testando servi√ßo que escuta eventos e os transforma
**Problema**: Testes falhando ao tentar verificar se listeners foram chamados ap√≥s processar eventos de input em RecorderListenerService
**Contexto**: Servi√ßo que escuta eventos de EventDispatcher e os transforma em eventos gravados, com l√≥gica condicional baseada em propriedades do evento
**Solu√ß√£o**: O c√≥digo verifica 'button' OU 'x' para identificar eventos de mouse, e 'key' para teclado. Importante sempre incluir todas as propriedades esperadas no mock do evento. Para throttle de mouse move, usar jest.useFakeTimers() e jest.advanceTimersByTime() para controlar o tempo
**Quando aplicar**: Ao testar servi√ßos que processam eventos com estruturas complexas e l√≥gica condicional baseada em propriedades do objeto evento
---

## [2025-07-05] - Mock de write em SSE deve ser feito ap√≥s streamEvents
**Problema**: Teste de heartbeat error falhando porque o mock de write era aplicado antes de chamar streamEvents, afetando as escritas iniciais
**Contexto**: Controller SSE que escreve eventos iniciais antes de configurar o heartbeat
**Solu√ß√£o**: Primeiro chamar o m√©todo streamEvents para permitir as escritas iniciais, depois aplicar o mock de write para simular erro apenas no heartbeat
**Quando aplicar**: Ao testar comportamento de erro em callbacks espec√≠ficos de SSE, sempre mockar ap√≥s a configura√ß√£o inicial da conex√£o
---

## [2025-07-05] - Mock de pino logger com __esModule
**Problema**: TypeError: (0 , pino_1.default) is not a function ao tentar criar inst√¢ncia da classe que usa pino
**Contexto**: Servi√ßo que inicializa logger pino como propriedade de classe
**Solu√ß√£o**: No mock do pino, adicionar __esModule: true junto com a fun√ß√£o default que retorna o objeto logger mockado
**Quando aplicar**: Ao mockar m√≥dulos ES que s√£o importados como default em TypeScript com verbatimModuleSyntax
---

## [2025-07-05] - Testando middleware de valida√ß√£o Fastify com Zod
**Problema**: Necessidade de testar middleware que valida requisi√ß√µes usando schemas Zod
**Contexto**: Middleware que recebe schema Zod e retorna fun√ß√£o async que valida request.body
**Solu√ß√£o**: Criar mocks m√≠nimos de FastifyRequest/Reply, testar cen√°rios de sucesso, falha de valida√ß√£o, transforma√ß√£o de dados, e edge case de exce√ß√µes n√£o-Error. Usar require() ao inv√©s de import devido ao verbatimModuleSyntax
**Quando aplicar**: Ao testar middlewares de valida√ß√£o que usam Zod e precisam cobrir todos os branches incluindo tratamento de erros espec√≠ficos
---

## [2025-07-05] - Testando arquivos de configura√ß√£o com environment variables
**Problema**: Necessidade de testar arquivos que leem process.env e transformam valores com parseInt/parseFloat
**Contexto**: Arquivo environment.ts que exporta configura√ß√µes lidas de process.env com valores default e transforma√ß√µes
**Solu√ß√£o**: 1) Mock dotenv antes de qualquer import, 2) Usar beforeEach com jest.resetModules() e salvar/restaurar process.env original, 3) Deletar vari√°veis espec√≠ficas com delete process.env.VAR para testar defaults, 4) Testar valores v√°lidos, inv√°lidos (NaN) e edge cases, 5) Usar require() ao inv√©s de import para recarregar m√≥dulo ap√≥s mudan√ßas em process.env
**Quando aplicar**: Ao testar arquivos de configura√ß√£o que dependem de environment variables e precisam ser testados com diferentes valores
---

## [2025-07-05] - Comportamento de NaN em valida√ß√µes num√©ricas
**Problema**: Valores NaN passam valida√ß√µes de intervalo porque todas as compara√ß√µes com NaN retornam false
**Contexto**: Arquivo de configura√ß√£o com valida√ß√µes tipo "value < min || value > max" onde value pode ser NaN
**Solu√ß√£o**: Entender que NaN < 1 = false e NaN > 100 = false, ent√£o NaN n√£o satisfaz nenhuma condi√ß√£o de erro. Para detectar NaN especificamente, usar isNaN() ou Number.isNaN(). Nos testes, verificar que o c√≥digo aceita NaN sem lan√ßar erro (a menos que haja valida√ß√£o espec√≠fica para NaN)
**Quando aplicar**: Ao testar valida√ß√µes num√©ricas onde parseInt/parseFloat podem retornar NaN com entrada inv√°lida
---

## [2025-07-05] - Testando arquivos de rotas Fastify
**Problema**: Necessidade de testar arquivos que registram rotas no Fastify com schemas de valida√ß√£o
**Contexto**: Arquivo recorder.routes.ts que exporta fun√ß√£o ass√≠ncrona que registra rotas GET com schemas complexos
**Solu√ß√£o**: 1) Mockar container de DI que resolve o controller, 2) Mockar inst√¢ncia Fastify com m√©todos de registro (get, post), 3) Verificar que rotas foram registradas com paths e schemas corretos, 4) Testar que handlers est√£o vinculados corretamente executando-os e verificando chamadas ao controller, 5) Validar estrutura completa dos schemas de resposta
**Quando aplicar**: Ao testar arquivos de rotas Fastify, focar em verificar registro correto das rotas, vincula√ß√£o de handlers e estrutura dos schemas
---

## [2025-07-05] - Testando arquivos de configura√ß√£o com pino logger
**Problema**: Testes n√£o detectavam chamadas ao pino.default ap√≥s import do logger devido a ordem de execu√ß√£o dos requires
**Contexto**: Arquivo logger.ts que exporta inst√¢ncia configurada do pino logger com transporte condicional baseado em nodeEnv
**Solu√ß√£o**: Em cada teste, ap√≥s fazer jest.doMock() do environment para modificar as configura√ß√µes, sempre fazer require('pino') ANTES de require do arquivo testado. Isso garante que a refer√™ncia ao mock seja a mesma usada internamente
**Quando aplicar**: Ao testar arquivos que criam inst√¢ncias de bibliotecas mockadas durante a importa√ß√£o, sempre require o mock antes do arquivo testado em cada teste
---

## [2025-07-05] - Testando arquivos de configura√ß√£o simples com const objects
**Problema**: Teste esperava que objeto exportado como "as const" fosse congelado (Object.isFrozen), mas n√£o era
**Contexto**: Arquivo mouse.config.ts que exporta objeto MouseDefaults com "as const"
**Solu√ß√£o**: "as const" no TypeScript apenas garante tipos readonly em tempo de compila√ß√£o, n√£o congela o objeto em runtime. Para testar configura√ß√µes, verificar apenas que as propriedades existem e t√™m os valores esperados, n√£o o estado de congelamento
**Quando aplicar**: Ao testar objetos de configura√ß√£o com "as const", focar em testar valores e propriedades, n√£o caracter√≠sticas de runtime como congelamento
---

## [2025-07-05] - Valida√ß√µes num√©ricas em arquivos de configura√ß√£o com parseInt NaN
**Problema**: Testes esperavam que parseInt('invalid') lan√ßasse erro na valida√ß√£o, mas NaN n√£o falha em compara√ß√µes de intervalo
**Contexto**: Arquivo recorder.config.ts validando valores parseInt com compara√ß√µes tipo value < min || value > max
**Solu√ß√£o**: Como NaN < 20 √© false e NaN > 200 tamb√©m √© false, a valida√ß√£o passa. Para fazer NaN falhar a valida√ß√£o, adicionar isNaN() check expl√≠cito ou inverter a l√≥gica para verificar se est√° dentro do intervalo v√°lido (value >= min && value <= max)
**Quando aplicar**: Ao validar valores num√©ricos parseados de strings, sempre considerar o caso NaN explicitamente se quiser rejeit√°-lo
---

## [2025-07-05] - Testando arquivo que executa c√≥digo na importa√ß√£o
**Problema**: Arquivo test-endpoint.ts executa runTests() imediatamente ao ser importado, dificultando testes isolados
**Contexto**: Script de teste que executa chamadas HTTP automaticamente sem exportar fun√ß√µes
**Solu√ß√£o**: 1) Mockar fetch e setTimeout globalmente antes de qualquer import, 2) Capturar callbacks de setTimeout em array para execu√ß√£o controlada, 3) Executar callbacks manualmente para simular passagem de tempo, 4) Aguardar opera√ß√µes ass√≠ncronas com setImmediate, 5) Testar diferentes cen√°rios de erro configurando mocks antes de cada require
**Quando aplicar**: Ao testar arquivos que executam c√≥digo imediatamente na importa√ß√£o sem exportar fun√ß√µes, usar estrat√©gia de controle de execu√ß√£o ass√≠ncrona
---

## [2025-07-05] - Testando interfaces TypeScript puras
**Problema**: Interfaces TypeScript n√£o geram c√≥digo JavaScript execut√°vel, resultando sempre em 0% de coverage
**Contexto**: Interface CommandResult com apenas defini√ß√£o de tipos, sem implementa√ß√£o
**Solu√ß√£o**: Criar testes que verificam padr√µes de uso da interface: 1) Importa√ß√£o do m√≥dulo sem erros, 2) Objetos que seguem a estrutura da interface, 3) Classes que implementam o padr√£o da interface, 4) Diferentes tipos de dados nas propriedades. O coverage sempre ser√° 0% e isso √© normal para interfaces puras.
**Quando aplicar**: Ao testar interfaces TypeScript que s√£o apenas contratos de tipo sem c√≥digo execut√°vel, focar em validar casos de uso em vez de coverage
---